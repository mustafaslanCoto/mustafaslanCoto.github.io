[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mustafa Aslan",
    "section": "",
    "text": "I am currently pursuing a PhD at Cardiff Business School, where I specialise in developing AI&machine learning models for healthcare management. My research involves developing and refining advanced statistical&machine learning techniques to analyse complex datasets, aiming to enhance decision-making processes in real-world applications. I hold a master’s degree in Financial Mathematics from the Institute of Applied Mathematics, where I deepened my knowledge and skills in statistical and machine learning modelling. With two years of professional experience as a data scientist, I have gained practical expertise in data analysis and the development of predictive models using Python in a banking environment. This experience has equipped me with a solid understanding of how to apply mathematical concepts to solve business challenges effectively."
  },
  {
    "objectID": "index.html#eduacation",
    "href": "index.html#eduacation",
    "title": "Mustafa Aslan",
    "section": "Eduacation",
    "text": "Eduacation\nCardiff University | UK | 2024-2028"
  },
  {
    "objectID": "index.html#experiences",
    "href": "index.html#experiences",
    "title": "Mustafa Aslan",
    "section": "Experiences",
    "text": "Experiences\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "cvpdf/LICENSE.html",
    "href": "cvpdf/LICENSE.html",
    "title": "GNU General Public License",
    "section": "",
    "text": "Version 3, 29 June 2007\nCopyright © 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n\n\nThe GNU General Public License is a free, copyleft license for software and other kinds of works.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\nFor the developers’ and authors’ protection, the GPL clearly explains that there is no warranty for this free software. For both users’ and authors’ sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users’ freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\nThe precise terms and conditions for copying, distribution and modification follow.\n\n\n\n\n\n“This License” refers to version 3 of the GNU General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based on the Program.\nTo “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n\n\nThe “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.\nA “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work’s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.\n\n\n\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n\n\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work’s users, your or third parties’ legal rights to forbid circumvention of technological measures.\n\n\n\nYou may convey verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n\n\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified it, and giving a relevant date.\nb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to “keep intact all notices”.\nc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation’s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n\n\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\na) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\nd) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, “normally used” refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n\n\n“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or authors of the material; or\ne) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n\n\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n\n\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n\n\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party’s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n\n\nA “contributor” is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor’s “contributor version”.\nA contributor’s “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, “control” includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor’s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To “grant” such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. “Knowingly relying” means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient’s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is “discriminatory” if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n\n\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\n\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS\n\n\n\n\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.\n&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\nAlso add information on how to contact you by electronic and paper mail.\nIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\n&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\nThe hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program’s commands might be different; for a GUI interface, you would use an “about box”.\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a “copyright disclaimer” for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.\nThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;."
  },
  {
    "objectID": "cvpdf/LICENSE.html#preamble",
    "href": "cvpdf/LICENSE.html#preamble",
    "title": "GNU General Public License",
    "section": "",
    "text": "The GNU General Public License is a free, copyleft license for software and other kinds of works.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program–to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\nFor the developers’ and authors’ protection, the GPL clearly explains that there is no warranty for this free software. For both users’ and authors’ sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users’ freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\nThe precise terms and conditions for copying, distribution and modification follow."
  },
  {
    "objectID": "cvpdf/LICENSE.html#terms-and-conditions",
    "href": "cvpdf/LICENSE.html#terms-and-conditions",
    "title": "GNU General Public License",
    "section": "",
    "text": "“This License” refers to version 3 of the GNU General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this License. Each licensee is addressed as “you”. “Licensees” and “recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a “modified version” of the earlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based on the Program.\nTo “propagate” a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices” to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.\n\n\n\nThe “source code” for a work means the preferred form of the work for making modifications to it. “Object code” means any non-source form of a work.\nA “Standard Interface” means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A “Major Component”, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work’s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.\n\n\n\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.\n\n\n\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work’s users, your or third parties’ legal rights to forbid circumvention of technological measures.\n\n\n\nYou may convey verbatim copies of the Program’s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.\n\n\n\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified it, and giving a relevant date.\nb) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to “keep intact all notices”.\nc) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an “aggregate” if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation’s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.\n\n\n\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:\n\na) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.\nd) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, “normally used” refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n“Installation Information” for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.\n\n\n\n“Additional permissions” are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or authors of the material; or\ne) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.\n\nAll other non-permissive additional terms are considered “further restrictions” within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.\n\n\n\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.\n\n\n\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.\n\n\n\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party’s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n\n\nA “contributor” is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor’s “contributor version”.\nA contributor’s “essential patent claims” are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, “control” includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor’s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To “grant” such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. “Knowingly relying” means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient’s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is “discriminatory” if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.\n\n\n\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License “or any later version” applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy’s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n\n\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS"
  },
  {
    "objectID": "cvpdf/LICENSE.html#how-to-apply-these-terms-to-your-new-programs",
    "href": "cvpdf/LICENSE.html#how-to-apply-these-terms-to-your-new-programs",
    "title": "GNU General Public License",
    "section": "",
    "text": "If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the “copyright” line and a pointer to where the full notice is found.\n&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\nAlso add information on how to contact you by electronic and paper mail.\nIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\n&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type 'show c' for details.\nThe hypothetical commands show w and show c should show the appropriate parts of the General Public License. Of course, your program’s commands might be different; for a GUI interface, you would use an “about box”.\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a “copyright disclaimer” for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see &lt;http://www.gnu.org/licenses/&gt;.\nThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read &lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;."
  },
  {
    "objectID": "bins/dist.html",
    "href": "bins/dist.html",
    "title": "my dist",
    "section": "",
    "text": "asdasdasda\n\\[\nf_x = \\int\n\\]\n\nimport pandas as pd\nimport numpy as np"
  },
  {
    "objectID": "talks/stats/cond_prob_main.html",
    "href": "talks/stats/cond_prob_main.html",
    "title": "Conditional Probability and Conditional Expectation",
    "section": "",
    "text": "Slides\n\nDate: Jul 26, 2023 3:50 PM – 4:30 PM\nEvent: Stats\nLocation: Cardiff, UK"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html",
    "title": "Random Variables",
    "section": "",
    "text": "For a discrete random variable \\(X\\), we define the probability mass function \\(p(\\alpha)\\) of \\(X\\) by\n\\[\np(\\alpha) = P(X = \\alpha)\n\\]\nThe probability mass function \\(p(\\alpha)\\) is positive for at most a countable number of values of \\(a\\). That is, if \\(X\\) must assume one of the values \\(x_1, x_2,\\dots ,\\) then\n\\[\np(x_i) \\geq 0 \\text{ for } i = 1, 2, \\dots\n\\]\nand\n\\[\n\\sum_{i=1}^{\\infty} p(x_i) = 1\n\\]\nThe cumulative distribution function \\(F(x)\\) can be expressed in terms of \\(p(\\alpha)\\) by\n\\[\nF(\\alpha) = P(X \\leq \\alpha) = \\sum_{x_i \\leq \\alpha} p(x_i)\n\\]\n\n\nIf \\(X\\) is a discrete random variable having a probability mass function \\(p(x)\\), then the expected value of \\(X\\) is defined by\n\\[\nE(X) = \\sum_{x_i} x_i p(x_i)\n\\]\n\n\n\nA Bernoulli random variable is a discrete random variable that takes the value 1 with probability \\(p\\) and the value 0 with probability \\(1-p\\). The probability mass function of a Bernoulli random variable \\(X\\) is given by \\[\np(x) = \\begin{cases}\n1-p & \\text{if } x = 0 \\\\\np & \\text{if } x = 1\n\\end{cases}\n\\]\nThe expected value of a Bernoulli random variable is given by \\[\nE(X) = 0 \\cdot (1-p) + 1 \\cdot p = p\n\\]\nThe variance of a Bernoulli random variable is given by \\[\nVar(X) = E(X^2) - (E(X))^2 = p - p^2 = p(1-p)\n\\]\n\n# Necessary packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# from scipy.stats import poisson\n\n\ndef bernoulli(p):\n    \"\"\"\n    Bernoulli distribution with parameter p.\n    \"\"\"\n    return np.random.binomial(1, p)\ndef binomial(n, p):\n    \"\"\"\n    Binomial distribution with parameters n and p.\n    \"\"\"\n    return np.random.binomial(n, p)\ndef geometric(p):\n    \"\"\"\n    Geometric distribution with parameter p.\n    \"\"\"\n    return np.random.geometric(p)\ndef negative_binomial(n, p):\n    \"\"\"\n    Negative binomial distribution with parameters n and p.\n    \"\"\"\n    return np.random.negative_binomial(n, p)\n\n\n\n\nSuppose that \\(n\\) independent trials, each of which results in a “success” with probability \\(p\\) and in a “failure” with probability \\(1−p\\), are to be performed. If \\(X\\) represents the number of successes that occur in the \\(n\\) trials, then \\(X\\) is said to be a binomial random variable with parameters \\(n, p\\). The probability mass function of a binomial random variable having parameters \\((n, p)\\) is given by\n\\[\np(x) = \\binom{n}{x} p^x (1-p)^{n-x}, \\quad x = 0, 1, \\dots, n\n\\]\nwhere \\(\\binom{n}{x} = \\frac{n!}{x!(n-x)!}\\) is the binomial coefficient, which counts the number of ways to choose \\(x\\) successes from \\(n\\) trials.\n\n\nIf \\(X\\) is a binomial random variable with parameters \\(n\\) and \\(p\\), then the expected value of \\(X\\) is given by \\[\nE(X) = np\n\\] ### Variance of a Binomial Random Variable If \\(X\\) is a binomial random variable with parameters \\(n\\) and \\(p\\), then the variance of \\(X\\) is given by \\[\nVar(X) = np(1-p)\n\\]\n\n\n\n\nA random variable \\(X\\) taking on one of the values \\(0, 1, 2, \\dots,\\) is said to be a Poisson random variable with parameter \\(\\lambda\\), if for some \\(\\lambda &gt; 0\\),\n\\[\np(i) = P \\{ X = i \\} = e^{-\\lambda} \\frac{\\lambda^i}{i!}, \\quad i = 0, 1, \\ldots\n\\]\n\n\nIf \\(X\\) is a Poisson random variable with parameter \\(\\lambda\\), then the expected value of \\(X\\) is given by\n\\[\nE(X) = \\sum_{i=0}^{\\infty} i e^{-\\lambda} \\frac{\\lambda^i}{i!}\n= e^{-\\lambda} \\sum_{i=1}^{\\infty} \\frac{\\lambda^i}{(i-1)!}\n= e^{-\\lambda} \\lambda \\sum_{i=0}^{\\infty} \\frac{\\lambda^i}{i!}\n= e^{-\\lambda} \\lambda e^{\\lambda}\n= \\lambda\n\\]\nwhere we have used the identity \\(\\sum_{i=0}^{\\infty} \\frac{\\lambda^i}{i!} = e^{\\lambda}\\).\n\ndef poisson(m, k):\n    \"\"\"\n    Calculate the Poisson probability of observing k events in an interval\n    given the average rate of occurrence n.\n\n    :param m: Average rate of occurrence (lambda)\n    :param k: Number of events\n    :return: Probability of observing k events\n    \"\"\"\n    from math import exp, factorial\n\n    return (m ** k) * exp(-m) / factorial(k)\n\n\n# Example usage\nx = np.arange(0, 20) # Average rate of occurrence\nlambdas = [1, 3, 5, 7, 10, 12,15] # Different values of lambda\n\n           \nplt.figure(figsize=(8, 6))\n\nfor lam in lambdas:\n    pmf = [poisson(lam, k) for k in x]\n    # Using scipy's poisson distribution for comparison\n    # pmf_scy = poisson.pmf(x, lam)\n    plt.plot(x, pmf, marker='o', label=f'λ = {lam}')\n\nplt.xlabel('Number of events (k)')\nplt.ylabel('Probability')\nplt.title('Poisson Distribution')\nplt.grid(axis=  \"y\" , linestyle='--')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#bernoulli-random-variable",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#bernoulli-random-variable",
    "title": "Random Variables",
    "section": "",
    "text": "A Bernoulli random variable is a discrete random variable that takes the value 1 with probability \\(p\\) and the value 0 with probability \\(1-p\\). The probability mass function of a Bernoulli random variable \\(X\\) is given by \\[\np(x) = \\begin{cases}\n1-p & \\text{if } x = 0 \\\\\np & \\text{if } x = 1\n\\end{cases}\n\\]\nThe expected value of a Bernoulli random variable is given by \\[\nE(X) = 0 \\cdot (1-p) + 1 \\cdot p = p\n\\]\nThe variance of a Bernoulli random variable is given by \\[\nVar(X) = E(X^2) - (E(X))^2 = p - p^2 = p(1-p)\n\\]\n\n# Necessary packages\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# from scipy.stats import poisson\n\n\ndef bernoulli(p):\n    \"\"\"\n    Bernoulli distribution with parameter p.\n    \"\"\"\n    return np.random.binomial(1, p)\ndef binomial(n, p):\n    \"\"\"\n    Binomial distribution with parameters n and p.\n    \"\"\"\n    return np.random.binomial(n, p)\ndef geometric(p):\n    \"\"\"\n    Geometric distribution with parameter p.\n    \"\"\"\n    return np.random.geometric(p)\ndef negative_binomial(n, p):\n    \"\"\"\n    Negative binomial distribution with parameters n and p.\n    \"\"\"\n    return np.random.negative_binomial(n, p)"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#binomial-random-variable",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#binomial-random-variable",
    "title": "Random Variables",
    "section": "",
    "text": "Suppose that \\(n\\) independent trials, each of which results in a “success” with probability \\(p\\) and in a “failure” with probability \\(1−p\\), are to be performed. If \\(X\\) represents the number of successes that occur in the \\(n\\) trials, then \\(X\\) is said to be a binomial random variable with parameters \\(n, p\\). The probability mass function of a binomial random variable having parameters \\((n, p)\\) is given by\n\\[\np(x) = \\binom{n}{x} p^x (1-p)^{n-x}, \\quad x = 0, 1, \\dots, n\n\\]\nwhere \\(\\binom{n}{x} = \\frac{n!}{x!(n-x)!}\\) is the binomial coefficient, which counts the number of ways to choose \\(x\\) successes from \\(n\\) trials.\n\n\nIf \\(X\\) is a binomial random variable with parameters \\(n\\) and \\(p\\), then the expected value of \\(X\\) is given by \\[\nE(X) = np\n\\] ### Variance of a Binomial Random Variable If \\(X\\) is a binomial random variable with parameters \\(n\\) and \\(p\\), then the variance of \\(X\\) is given by \\[\nVar(X) = np(1-p)\n\\]"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#the-poisson-random-variable",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#the-poisson-random-variable",
    "title": "Random Variables",
    "section": "",
    "text": "A random variable \\(X\\) taking on one of the values \\(0, 1, 2, \\dots,\\) is said to be a Poisson random variable with parameter \\(\\lambda\\), if for some \\(\\lambda &gt; 0\\),\n\\[\np(i) = P \\{ X = i \\} = e^{-\\lambda} \\frac{\\lambda^i}{i!}, \\quad i = 0, 1, \\ldots\n\\]\n\n\nIf \\(X\\) is a Poisson random variable with parameter \\(\\lambda\\), then the expected value of \\(X\\) is given by\n\\[\nE(X) = \\sum_{i=0}^{\\infty} i e^{-\\lambda} \\frac{\\lambda^i}{i!}\n= e^{-\\lambda} \\sum_{i=1}^{\\infty} \\frac{\\lambda^i}{(i-1)!}\n= e^{-\\lambda} \\lambda \\sum_{i=0}^{\\infty} \\frac{\\lambda^i}{i!}\n= e^{-\\lambda} \\lambda e^{\\lambda}\n= \\lambda\n\\]\nwhere we have used the identity \\(\\sum_{i=0}^{\\infty} \\frac{\\lambda^i}{i!} = e^{\\lambda}\\).\n\ndef poisson(m, k):\n    \"\"\"\n    Calculate the Poisson probability of observing k events in an interval\n    given the average rate of occurrence n.\n\n    :param m: Average rate of occurrence (lambda)\n    :param k: Number of events\n    :return: Probability of observing k events\n    \"\"\"\n    from math import exp, factorial\n\n    return (m ** k) * exp(-m) / factorial(k)\n\n\n# Example usage\nx = np.arange(0, 20) # Average rate of occurrence\nlambdas = [1, 3, 5, 7, 10, 12,15] # Different values of lambda\n\n           \nplt.figure(figsize=(8, 6))\n\nfor lam in lambdas:\n    pmf = [poisson(lam, k) for k in x]\n    # Using scipy's poisson distribution for comparison\n    # pmf_scy = poisson.pmf(x, lam)\n    plt.plot(x, pmf, marker='o', label=f'λ = {lam}')\n\nplt.xlabel('Number of events (k)')\nplt.ylabel('Probability')\nplt.title('Poisson Distribution')\nplt.grid(axis=  \"y\" , linestyle='--')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#exponential-random-variables",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#exponential-random-variables",
    "title": "Random Variables",
    "section": "2.1 Exponential Random Variables",
    "text": "2.1 Exponential Random Variables\nA continuous random variable whose probability density function is given, for some \\(\\lambda &gt; 0\\), by: \\[\nf(x) = \\begin{cases}\n\\lambda e^{-\\lambda x} & x \\geq 0 \\\\\n0 & x &lt; 0\n\\end{cases}\n\\]\nis said to be an exponential random variable with parameter \\(\\lambda\\), which is the mean of the distribution. The cumulative distribution function is given by\n\\[\nF(\\alpha) =  \\int_0^\\alpha \\lambda e^{-\\lambda x} \\, dx, = 1-e^{-\\lambda \\alpha}  \\quad \\alpha \\geq 0\n\\]\nNote that \\(F(\\infty) = \\int_0^\\infty \\lambda e^{-\\lambda x} \\, dx = 1\\).\n\nExpectation of an Exponential Random Variable\nIf \\(X\\) is an exponential random variable with parameter \\(\\lambda\\), then the expected value of \\(X\\) is given by \\[\nE(X) = \\int_0^\\infty x \\lambda e^{-\\lambda x} \\, dx\n\\]\nIntegration by parts (\\(dv = \\lambda e^{-\\lambda x}, u = x\\)) yields \\[\nE(X) = \\left[ -\\frac{x}{\\lambda} e^{-\\lambda x} \\right]_0^\\infty + \\frac{1}{\\lambda} \\int_0^\\infty e^{-\\lambda x} \\, dx\n= 0 + \\frac{1}{\\lambda} \\cdot \\frac{1}{\\lambda} = \\frac{1}{\\lambda}\n\\]\n\ndef exponential(x, m):\n    \"\"\"\n    Calculate the Exponential probability density function (PDF) for a given x and rate parameter m.\n\n    :param x: Value at which to evaluate the PDF\n    :param m: Rate parameter (1/lambda)\n    :return: Probability density at x\n    \"\"\"\n    from math import exp\n\n    return m * exp(-m * x) if x &gt;= 0 else 0\n\n\nx = np.linspace(0, 10, 50)\nlamdas = [0.1, 0.5, 1, 3, 5] # Different values of lambda\n\nplt.figure(figsize=(8, 6))# Plotting the Exponential distribution\nfor lam in lamdas:\n    pdf = [exponential(i, lam) for i in x]\n    plt.plot(x, pdf, marker='o', label=f'λ = {lam}')\nplt.xlabel('x')\nplt.ylabel('Probability Density')\nplt.title('Exponential Distribution')\nplt.grid(axis=  \"y\" , linestyle='--')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#gamma-random-variables",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#gamma-random-variables",
    "title": "Random Variables",
    "section": "2.2 Gamma Random Variables",
    "text": "2.2 Gamma Random Variables\nA continuous random variable whose density is given by: \\[\nf(x) = \\begin{cases}\n\\frac{\\lambda e^{- \\lambda x} {(\\lambda x)}^{\\alpha-1}}{\\Gamma (\\alpha)} & x \\geq 0 \\\\\n0 & x &lt; 0\n\\end{cases}\n\\]\nfor some \\(\\lambda&gt;0\\) and \\(\\alpha&gt;0\\) is said to be a gamma random variable with parameters \\(\\alpha, \\lambda\\).\nThe quantity \\(\\Gamma (\\alpha)\\) is called the gamma function and is defined by\n\\[\n\\Gamma (\\alpha) = \\int_0^\\infty e^{-x} x^{\\alpha-1} \\, dx = (\\alpha-1)!\n\\]\n\nExpectation of a Gamma Random Variable\nIf \\(X\\) is a gamma random variable with parameters \\(\\alpha\\) and \\(\\lambda\\), then the expected value of \\(X\\) is given by \\[\nE(X) = \\int_0^\\infty x \\frac{\\lambda e^{- \\lambda x} {(\\lambda x)}^{\\alpha-1}}{\\Gamma (\\alpha)} \\, dx\n= \\frac{1}{\\lambda} \\int_0^\\infty e^{-x} x^{\\alpha} \\, dx\n= \\frac{1}{\\lambda} \\cdot \\Gamma (\\alpha + 1)\n= \\frac{1}{\\lambda} \\cdot \\alpha \\Gamma (\\alpha)\n= \\frac{\\alpha}{\\lambda}\n\\]\n\ndef gamma(x, alpha, lamd):\n    \"\"\"\n    Calculate the Gamma probability density function (PDF) for a given x, shape parameter alpha, and scale parameter lamd.\n\n    :param x: Value at which to evaluate the PDF\n    :param alpha: Shape parameter (alpha)\n    :param lamd: Scale parameter (lamda)\n    :return: Probability density at x\n    \"\"\"\n    from math import exp, factorial\n\n    return (lamd*exp(-lamd*x)*((lamd*x)**(alpha-1)))/factorial(alpha) if x &gt;= 0 else 0\n\n\nx = np.linspace(0, 10, 50) # Range of x values for the gamma distribution\nalpha_values = [3, 2] # Different values of alpha (shape parameter)\nlambdas = [1.5,  2] # Different values of lambda (scale parameter)\nplt.figure(figsize=(8, 6)) # Plotting the Gamma distribution\nfor alpha in alpha_values:\n    for lam in lambdas:\n        pdf = [gamma(i, alpha, lam) for i in x]\n        plt.plot(x, pdf, marker='o', label=f'α = {alpha}, λ = {lam}')\nplt.xlabel('x')\nplt.ylabel('Probability Density')\nplt.title('Gamma Distribution')\nplt.grid(axis=  \"y\" , linestyle='--')\nplt.legend()\nplt.show()"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#normal-random-variables",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#normal-random-variables",
    "title": "Random Variables",
    "section": "2.3 Normal Random Variables",
    "text": "2.3 Normal Random Variables\nWe say that \\(X\\) is a normal random variable (or simply that \\(X\\) is normally distributed) with parameters \\(\\mu\\) and \\(\\sigma ^2\\) if the density of X is given by\n\\[\nf(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-(x-\\mu)/ 2\\sigma^2} \\quad -\\infty &lt; x &lt; \\infty\n\\]\nThis density function is a bell-shaped curve that is symmetric around \\(\\mu\\).\nThe mean of the normal distribution is \\(\\mu\\) and the variance is \\(\\sigma^2\\). The cumulative distribution function is given by\n\\[\nF_X(\\alpha) = P(X \\leq \\alpha) = \\int_{-\\infty}^ \\alpha \\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-(x-\\mu)/ 2\\sigma^2} \\, dx\n\\]\n\nExpectation of a Normal Random Variable\nIf \\(X\\) is a normal random variable with parameters \\(\\mu\\) and \\(\\sigma^2\\), then the expected value of \\(X\\) is given by \\[\nE(X) = \\int_{-\\infty}^\\infty x \\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-(x-\\mu)/ 2\\sigma^2} \\, dx\n= \\mu \\int_{-\\infty}^\\infty \\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-(x-\\mu)/ 2\\sigma^2} \\, dx\n= \\mu \\cdot 1\n= \\mu\n\\]\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n\ndef normal(x, mu, sigma):\n    \"\"\"\n    Calculate the Normal probability density function (PDF) for a given x, mean mu, and standard deviation sigma.\n\n    :param x: Value at which to evaluate the PDF\n    :param mu: Mean of the distribution\n    :param sigma: Standard deviation of the distribution\n    :return: Probability density at x\n    \"\"\"\n    from math import exp, pi\n\n    return (1 / (sigma * (2 * pi) ** 0.5)) * exp(-0.5 * ((x - mu) / sigma) ** 2)\n    \n\n\n# Example usage\nmu =50 # Mean of the distribution\nstd_devs = [5, 10, 20] # Different standard deviations\n\n# X range for plotting\nx = np.linspace(0, 100, 100) \n\n# Plot each distribution\nfor sigma in std_devs:\n    # y = norm.pdf(x, loc=mu, scale=sigma)\n    y = [normal(i, mu, sigma) for i in x]\n    plt.plot(x, y, label=f'std = {sigma}')\n\nplt.title('Normal Distributions with Different Standard Deviations')\nplt.xlabel('Value')\nplt.ylabel('Density')\nplt.legend()\nplt.grid(True)\nplt.show()"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#expectation-of-a-function-of-a-random-variable",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#expectation-of-a-function-of-a-random-variable",
    "title": "Random Variables",
    "section": "Expectation of a Function of a Random Variable",
    "text": "Expectation of a Function of a Random Variable\n\nIn Discrete Case\nIf \\(X\\) is a discrete random variable having a probability mass function \\(p(x)\\), and \\(g(x)\\) is a function of \\(x\\), then the expected value of \\(g(X)\\) is defined by \\[\nE(g(X)) = \\sum_{x_i} g(x_i) p(x_i)\n\\] ### In Continuous Case If \\(X\\) is a continuous random variable having a probability density function \\(f(x)\\), and \\(g(x)\\) is a function of \\(x\\), then the expected value of \\(g(X)\\) is defined by \\[\nE(g(X)) = \\int_{-\\infty}^{\\infty} g(x) f(x) \\, dx\n\\]"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#independent-random-variables",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#independent-random-variables",
    "title": "Random Variables",
    "section": "Independent Random Variables",
    "text": "Independent Random Variables\nThe random variables \\(X\\) and \\(Y\\) are said to be independent if, for all \\(a, b,\\) \\[\nP(X \\leq a, Y \\leq b) = P(X \\leq a) P(Y \\leq b)\n\\]\nIn terms of the joint cumulative distribution function, this means that \\[\nF(a,b) = F_X(a) F_Y(b)\n\\]\nWhen \\(X\\) and \\(Y\\) are discrete random variables, the independence condition can be expressed as \\[\np(x,y) = p_X(x) p_Y(y)\n\\]\nWhen \\(X\\) and \\(Y\\) are joint continuous, the independence reduces to \\[\nf(x,y) = f_X(x) f_Y(y)\n\\]\n\nProof for discrete case\nSuppose that the joint probability mass function \\(p(x,y)\\), then\n\\[\n\\begin{align*}\nP(X \\leq a, Y \\leq b) &= \\sum_{y \\leq b} \\sum_{x \\leq a} p(x,y) \\\\\n&= \\sum_{y \\leq b} \\sum_{x \\leq a} p_X(x) p_Y(y) \\\\\n&= \\left( \\sum_{x \\leq a} p_X(x) \\right) \\left( \\sum_{y \\leq b} p_Y(y) \\right) \\\\\n&= P(X \\leq a) P(Y \\leq b)\n\\end{align*}\n\\]\nand so \\(X\\) and \\(Y\\) are independent.\n\n\nProof for continuous case\nSuppose that the joint probability density function \\(f(x,y)\\), then \\[\n\\begin{align*}\nP(X \\leq a, Y \\leq b) &= \\int_{-\\infty}^a \\int_{-\\infty}^b f(x,y) \\, dx \\, dy \\\\\n&= \\int_{-\\infty}^a \\int_{-\\infty}^b f_X(x) f_Y(y) \\, dx \\, dy \\\\\n&= \\left( \\int_{-\\infty}^a f_X(x) \\, dx \\right) \\left( \\int_{-\\infty}^b f_Y(y) \\, dy \\right) \\\\\n&= P(X \\leq a) P(Y \\leq b)\n\\end{align*}\n\\]"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#covariance-and-variance-of-sums-of-random-variables",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#covariance-and-variance-of-sums-of-random-variables",
    "title": "Random Variables",
    "section": "Covariance and Variance of Sums of Random Variables",
    "text": "Covariance and Variance of Sums of Random Variables\nThe covariance of any two random variables \\(X\\) and \\(Y\\), denoted by \\(Cov(X,Y)\\), is defined by \\[\nCov(X,Y) = E[(X - E(X))(Y - E(Y))] = E(XY) - E(X)E(Y)\n\\] The variance of a random variable \\(X\\), denoted by \\(Var(X)\\), is defined by \\[\nVar(X) = E[(X - E(X))^2] = E(X^2) - (E(X))^2\n\\]"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/distributions.html#moment-generating-functions",
    "href": "talks/stats_docs/dist_slides_docs/distributions.html#moment-generating-functions",
    "title": "Random Variables",
    "section": "Moment Generating Functions",
    "text": "Moment Generating Functions"
  },
  {
    "objectID": "talks/index.html",
    "href": "talks/index.html",
    "title": "Talks & Workshops",
    "section": "",
    "text": "Mustafa Aslan\n\n\nMar 18, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMustafa Aslan\n\n\nMar 18, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "talks/index.html#probability-and-statistics",
    "href": "talks/index.html#probability-and-statistics",
    "title": "Talks & Workshops",
    "section": "",
    "text": "Mustafa Aslan\n\n\nMar 18, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMustafa Aslan\n\n\nMar 18, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "talks/index.html#stocastic-optimization-and-reinforcement-learning",
    "href": "talks/index.html#stocastic-optimization-and-reinforcement-learning",
    "title": "Talks & Workshops",
    "section": "Stocastic Optimization and Reinforcement Learning",
    "text": "Stocastic Optimization and Reinforcement Learning"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html",
    "title": "Monte Carlo Prediction",
    "section": "",
    "text": "import math\nimport latexify\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\nimport random"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#monte-carlo-control",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#monte-carlo-control",
    "title": "Monte Carlo Prediction",
    "section": "Monte Carlo Control",
    "text": "Monte Carlo Control\n\nMonte Carlo ES (Exploring Starts), for estimating \\(\\pi \\approx \\pi_*\\)\n\nimport numpy as np\nfrom collections import defaultdict\n\ndef initialize(states, actions):\n    pi = {s: np.random.choice(actions) for s in states}  # Arbitrary policy\n    Q = {(s, a): 0.0 for s in states for a in actions}  # Arbitrary action-value function\n    Returns = defaultdict(list)  # Empty list for each state-action pair\n    return pi, Q, Returns\n\ndef generate_episode(pi, env, start_state, start_action):\n    episode = []\n    state = start_state\n    action = start_action\n    while True:\n        next_state, reward, done, _ = env.step(action)\n        episode.append((state, action, reward))\n        state = next_state\n        if done:\n            break\n        action = pi[state]\n    return episode\n\ndef monte_carlo_es(env, states, actions, gamma=1.0, episodes=1000, epsilon=0.1):\n    pi, Q, Returns = initialize(states, actions)\n    \n    for _ in range(episodes):\n        start_state = np.random.choice(states)\n        start_action = np.random.choice(actions)\n        episode = generate_episode(pi, env, start_state, start_action)\n        G = 0\n        visited_state_action_pairs = set()\n        \n        for t in range(len(episode) - 1, -1, -1):\n            state, action, reward = episode[t]\n            G = gamma * G + reward\n            \n            if (state, action) not in visited_state_action_pairs:\n                visited_state_action_pairs.add((state, action))\n                Returns[(state, action)].append(G)\n                Q[(state, action)] = np.mean(Returns[(state, action)])\n                pi[state] = max(actions, key=lambda a: Q[(state, a)])\n    \n    return pi, Q\n\n# Example usage with a hypothetical environment\nclass DummyEnv:\n    def reset(self):\n        return 0  # Starting state\n    \n    def step(self, action):\n        next_state = np.random.choice([0, 1])\n        reward = np.random.choice([0, 1])\n        done = np.random.choice([True, False])\n        return next_state, reward, done, {}\n\n# Define states and actions\nstates = [0, 1]\nactions = [0, 1]\n\n# Create environment\nenv = DummyEnv()\n\n# Run Monte Carlo ES\npi, Q = monte_carlo_es(env, states, actions)\n\nprint(\"Optimal Policy:\", pi)\nprint(\"Action-Value Function:\", Q)\n\nEstimated Policy:\nState 0: Action 1\nState 1: Action 0\nState 2: Action 0\nState 3: Action 0\n\nEstimated Q-values:\nState 2: [-2. -2.]\nState 1: [-4. -4.]\nState 0: [-5. -4.]\nState 3: [0. 0.]\n\n\n\nstates = [0, 1, 2, 3]\nactions = [0, 1]\ncurrent_state = 0"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#monte-carlo-control-without-exploring-starts",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#monte-carlo-control-without-exploring-starts",
    "title": "Monte Carlo Prediction",
    "section": "Monte Carlo Control without Exploring Starts",
    "text": "Monte Carlo Control without Exploring Starts\n\nOn-policy first-visit MC control (for \\(\\epsilon\\)-soft policies), estimating \\(\\pi \\approx \\pi_*\\)\n\nimport numpy as np\nfrom collections import defaultdict\nimport random\n\nclass SimpleEnv:\n    def __init__(self):\n        self.states = [0, 1, 2, 3]\n        self.actions = [0, 1]\n        self.current_state = 0\n    \n    def reset(self):\n        self.current_state = random.choice(self.states)\n        return self.current_state\n    \n    def step(self, action):\n        if self.current_state == 0:\n            if action == 0:\n                self.current_state = 1\n                return 1, -1, False, {}\n            else:\n                self.current_state = 2\n                return 2, -2, False, {}\n        elif self.current_state == 1:\n            self.current_state = 2\n            return 2, -2, False, {}\n        elif self.current_state == 2:\n            self.current_state = 3\n            return 3, -2, True, {}\n        elif self.current_state == 3:\n            return 3, 0, True, {}\n\ndef epsilon_soft_policy(Q, state, n_actions, epsilon):\n    policy = np.ones(n_actions) * epsilon / n_actions\n    best_action = np.argmax(Q[state])\n    policy[best_action] += (1.0 - epsilon)\n    return policy\n\ndef on_policy_first_visit_mc_control(env, num_episodes, gamma=1.0, epsilon=0.1):\n    Q = defaultdict(lambda: np.zeros(len(env.actions)))\n    returns = defaultdict(list)\n    policy = {s: epsilon_soft_policy(Q, s, len(env.actions), epsilon) for s in env.states}\n    \n    for _ in range(num_episodes):\n        # Generate an episode following the policy\n        episode = []\n        state = env.reset()\n        done = False\n        while not done:\n            action = np.random.choice(env.actions, p=policy[state])\n            next_state, reward, done, _ = env.step(action)\n            episode.append((state, action, reward))\n            state = next_state\n        \n        # Calculate returns and update Q and policy\n        G = 0\n        visited_state_action_pairs = set()\n        for t in reversed(range(len(episode))):\n            state, action, reward = episode[t]\n            G = gamma * G + reward\n            if (state, action) not in visited_state_action_pairs:\n                visited_state_action_pairs.add((state, action))\n                returns[(state, action)].append(G)\n                Q[state][action] = np.mean(returns[(state, action)])\n                best_action = np.argmax(Q[state])\n                for a in env.actions:\n                    if a == best_action:\n                        policy[state][a] = 1 - epsilon + epsilon / len(env.actions)\n                    else:\n                        policy[state][a] = epsilon / len(env.actions)\n    \n    return policy, Q\n\n# Example usage\nenv = SimpleEnv()\nnum_episodes = 1000\npolicy, Q = on_policy_first_visit_mc_control(env, num_episodes)\n\n# Print the estimated policy and Q-values\nprint(\"Estimated Policy:\")\nfor state in policy:\n    print(f\"State {state}: {policy[state]}\")\n\nprint(\"\\nEstimated Q-values:\")\nfor state in Q:\n    print(f\"State {state}: {Q[state]}\")\n\nEstimated Policy:\nState 0: [0.475 0.525]\nState 1: [0.525 0.475]\nState 2: [0.525 0.475]\nState 3: [0.525 0.475]\n\nEstimated Q-values:\nState 0: [-5. -4.]\nState 1: [-4. -4.]\nState 2: [-2. -2.]\nState 3: [0. 0.]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#incremental-implementation-off-policy-prediction-via-importance-sampling",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#incremental-implementation-off-policy-prediction-via-importance-sampling",
    "title": "Monte Carlo Prediction",
    "section": "Incremental Implementation (Off-policy Prediction via Importance Sampling)",
    "text": "Incremental Implementation (Off-policy Prediction via Importance Sampling)\n\nOff-policy MC prediction (policy evaluation) for estimating \\(Q \\approx q_\\pi\\)\n\nclass Policy:\n    def __init__(self, policy_func):\n        self.policy_func = policy_func\n\n    def __call__(self, state):\n        return self.policy_func(state)\n\n    def prob(self, action, state):\n        if self.policy_func(state) == action:\n            return 1.0\n        else:\n            return 0.33  # Assuming equal probability for random policy\n# class RandomPolicy(Policy):\n#     def prob(self, action, state):\n#         return 1.0 / len(self.actions) \n# Define the target policy function\ndef target_policy(state):\n    \"\"\"Discharge if state is 'low', ongoing care if 'medium', transfer if 'high'.\"\"\"\n    if state == 'low':\n        return 'discharge'\n    elif state == 'medium':\n        return 'ongoing care'\n    else:\n        return 'transfer to other ward'\n\n# Define the behavior policy function\ndef behavior_policy(state):\n    \"\"\"Randomly choose an action.\"\"\"\n    return np.random.choice(['discharge', 'ongoing care', 'transfer to other ward'])\n\n# Create policy instances\ntarget_policy_instance = Policy(target_policy)\nbehavior_policy_instance = Policy(behavior_policy)\n\n# behavior_policy_instance = RandomPolicy(behavior_policy, actions)\n\ndef generate_episode(env, policy):\n    \"\"\"\n    Generate an episode following the given policy.\n\n    Args:\n        env: The environment.\n        policy: The policy to follow.\n\n    Returns:\n        episode: A list of (state, action, reward) tuples.\n    \"\"\"\n    episode = []\n    state = env.reset()\n    done = False\n\n    while not done:\n        action = policy(state)\n        next_state, reward, done, _ = env.step(action)\n        episode.append((state, action, reward))\n        state = next_state\n\n    return episode\n\ndef off_policy_mc_prediction(env, target_policy, behavior_policy, gamma=1.0, num_episodes=10000):\n    \"\"\"\n    Off-policy Monte Carlo prediction for estimating Q ≈ q_π.\n\n    Args:\n        env: The environment.\n        target_policy: The target policy π.\n        behavior_policy: The behavior policy b.\n        gamma: Discount factor.\n        num_episodes: Number of episodes to run.\n\n    Returns:\n        Q: The state-action value function.\n    \"\"\"\n    Q = defaultdict(lambda: {action: np.random.rand() for action in ['discharge', 'ongoing care', 'transfer to other ward']})\n    C = defaultdict(lambda: {action: 0.0 for action in ['discharge', 'ongoing care', 'transfer to other ward']})\n    Q_values = defaultdict(lambda: {action: [] for action in ['discharge', 'ongoing care', 'transfer to other ward']})\n\n    for episode in range(num_episodes):\n        episode_data = generate_episode(env, behavior_policy_instance)\n        G = 0\n        W = 1\n\n        for t in reversed(range(len(episode_data))):\n            S_t, A_t, R_t1 = episode_data[t]\n            G = gamma * G + R_t1\n            C[S_t][A_t] += W\n            Q[S_t][A_t] += (W / C[S_t][A_t]) * (G - Q[S_t][A_t])\n            Q_values[S_t][A_t].append(Q[S_t][A_t])\n            W *= target_policy_instance.prob(A_t, S_t) / behavior_policy_instance.prob(A_t, S_t)\n            if W == 0:\n                break\n\n    return Q, Q_values\n\n# Example environment class\nclass HospitalEnv:\n    def __init__(self):\n        self.state_space = ['low', 'medium', 'high']  # Example state space\n        self.state = random.choice(self.state_space)\n\n    def reset(self):\n        self.state = random.choice(self.state_space)\n        return self.state\n\n    def step(self, action):\n        if action == 'discharge' and self.state == 'low':\n            reward = +4  # Discharge and state is low\n        elif action == 'discharge' and self.state == 'medium':\n            reward = +3  # Discharge and state is medium\n        elif action == 'discharge' and self.state == 'high':\n            reward = +2  # Discharge and state is high\n        elif action == 'ongoing care' and self.state == 'low':\n            reward = -1  # Ongoing care and state is low\n        elif action == 'ongoing care' and self.state == 'medium':\n            reward = 0  # Ongoing care and state is medium\n        elif action == 'ongoing care' and self.state == 'high':\n            reward = +1  # Ongoing care and state is high\n        elif action == 'transfer to other ward' and self.state == 'high':\n            reward = -2  # Transfer and state is high\n        elif action == 'transfer to other ward' and self.state == 'low':\n            reward = -1  # Transfer and state is high\n        else:\n            reward = -1  # Any other action-state combination\n        done = np.random.rand() &lt; 0.1  # End episode with 10% probability\n        self.state = random.choice(self.state_space)  # Randomly transition to a new state\n        return self.state, reward, done, {}\n\n# Create the Hospital environment\nenv = HospitalEnv()\n\n# Run the off-policy MC prediction algorithm\nQ, Q_V = off_policy_mc_prediction(env, target_policy_instance, behavior_policy_instance, num_episodes=10000)\n\n# Print the estimated action-value function\nfor state, actions in Q.items():\n    print(f\"State: {state}, Actions: {actions}\")\n\nState: high, Actions: {'discharge': 33.559139188410256, 'ongoing care': 37.78793859362933, 'transfer to other ward': 39.7422146010955}\nState: medium, Actions: {'discharge': 27.65488269887011, 'ongoing care': 28.262722308488133, 'transfer to other ward': 14.057149044582227}\nState: low, Actions: {'discharge': 42.037880067550425, 'ongoing care': 32.478764126731264, 'transfer to other ward': 26.51464256869759}\n\n\n\nfig, ax = plt.subplots(figsize=(10, 6))\nfor key, values in Q_V.items():\n    for k, v in values.items():\n        ax.plot(v, label=f'state: {key},  action: {k}')\nax.set_xlabel('Episode')\nax.set_ylabel('Value')\nax.set_title('Value Estimates for Each State-Action Pairs')\nax.legend(loc='lower left')\nplt.show()"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#off-policy-monte-carlo-control",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/python_code_for_rl.html#off-policy-monte-carlo-control",
    "title": "Monte Carlo Prediction",
    "section": "Off-policy Monte Carlo Control",
    "text": "Off-policy Monte Carlo Control\n\nOff-policy MC control, for estimating \\(\\pi \\approx \\pi_*\\)\n\nclass Policy:\n    def __init__(self, policy_func, actions):\n        self.policy_func = policy_func\n        self.actions = actions\n\n    def __call__(self, state):\n        return self.policy_func(state)\n\n    def prob(self, action, state):\n        if self.policy_func(state) == action:\n            return 1.0\n        else:\n            return 1.0 / len(self.actions)\n\ndef soft_policy(state, actions):\n    return np.random.choice(actions)\n\ndef generate_episode(env, policy):\n    episode = []\n    state = env.reset()\n    done = False\n\n    while not done:\n        action = policy(state)\n        next_state, reward, done, _ = env.step(action)\n        episode.append((state, action, reward))\n        state = next_state\n\n    return episode\n\ndef off_policy_mc_control(env, gamma=1.0, num_episodes=10000):\n    actions = ['discharge', 'ongoing care', 'transfer to other ward']\n    Q = defaultdict(lambda: {action: np.random.rand() for action in actions})\n    C = defaultdict(lambda: {action: 0.0 for action in actions})\n    pi = defaultdict(lambda: np.random.choice(actions))\n\n    for state in env.state_space:\n        pi[state] = max(Q[state], key=Q[state].get)\n\n    for episode in range(num_episodes):\n        episode_data = generate_episode(env, lambda state: soft_policy(state, actions))\n        G = 0\n        W = 1\n\n        for t in reversed(range(len(episode_data))):\n            S_t, A_t, R_t1 = episode_data[t]\n            G = gamma * G + R_t1\n            C[S_t][A_t] += W\n            Q[S_t][A_t] += (W / C[S_t][A_t]) * (G - Q[S_t][A_t])\n            pi[S_t] = max(Q[S_t], key=Q[S_t].get) # Find the key with the maximum value\n            if A_t != pi[S_t]:\n                break\n            W *= 1.0 / (1.0 / len(actions))\n\n    return Q, pi\n\n# Example environment class\nclass HospitalEnv:\n    def __init__(self):\n        self.state_space = ['low', 'medium', 'high']  # Example state space\n        self.state = random.choice(self.state_space)\n\n    def reset(self):\n        self.state = random.choice(self.state_space)\n        return self.state\n\n    def step(self, action):\n        if action == 'discharge' and self.state == 'low':\n            reward = 1  # Discharge and state is low\n        elif action == 'ongoing care' and self.state == 'medium':\n            reward = 1  # Ongoing care and state is medium\n        elif action == 'transfer to other ward' and self.state == 'high':\n            reward = 1  # Transfer and state is high\n        else:\n            reward = -1  # Any other action-state combination\n        done = np.random.rand() &lt; 0.1  # End episode with 10% probability\n        self.state = random.choice(self.state_space)  # Randomly transition to a new state\n        return self.state, reward, done, {}\n\n# Create the Hospital environment\nenv = HospitalEnv()\n\n# Run the off-policy MC control algorithm\nQ, pi = off_policy_mc_control(env, num_episodes=10000)\n\n# Print the estimated action-value function and policy\nfor state, actions in Q.items():\n    print(f\"State: {state}, Actions: {actions}\")\nprint(\"\\nPolicy:\")\nfor state, action in pi.items():\n    print(f\"State: {state}, Action: {action}\")\n\n\nimport numpy as np"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#outline",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#outline",
    "title": "Summary of Reinforcement Learning",
    "section": "Outline",
    "text": "Outline\n\nFinite Markov Decision Processes\nDynamic programming\nMonte carlo methods\nTemporal-Difference Learning\n\\(n\\)-step Bootstrapping"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#finite-markov-decision-processes-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#finite-markov-decision-processes-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Finite Markov Decision Processes",
    "text": "Finite Markov Decision Processes\n\n\nA finite Markov decision process (MDP) is a model of an environment in reinforcement learning. It consists of:\n\nA finite set of states \\(\\mathcal{S}\\)\nA finite set of actions \\(\\mathcal{A}\\)\nA state transition probability function \\(p: \\mathcal{S} \\times \\mathcal{A} \\times \\mathcal{S} \\to [0,1]\\)\nA reward function \\(r: \\mathcal{S} \\times \\mathcal{A} \\to \\mathbb{R}\\)\n\n\n\n\nThe state transition probability function \\(p(s' \\mid s, a)\\) defines the probability of transitioning to state \\(s'\\) from state \\(s\\) after taking action \\(a\\).\n\n\n\n\nThe reward function \\(r(s, a)\\) defines the expected reward received after taking action \\(a\\) in state \\(s\\).\n\n\n\nIn an MDP, the agent interacts with the environment in discrete time steps. At each time step \\(t\\), the agent:\n\nObserves the current state \\(S_t \\in \\mathcal{S}\\)\nChooses an action \\(A_t \\in \\mathcal{A}(S_t)\\)\nReceives a reward \\(R_{t+1} \\in \\mathcal{R}\\)\nTransitions to the next state \\(S_{t+1} \\in \\mathcal{S}\\)\n\n\n\nThe goal of the agent is to maximize the cumulative reward it receives over time."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#the-agentenvironment-interface",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#the-agentenvironment-interface",
    "title": "Summary of Reinforcement Learning",
    "section": "The Agent–Environment Interface",
    "text": "The Agent–Environment Interface\n\n\n\nThe learner and decision maker is called the agent.\nThe thing it interacts with, comprising everything outside the agent, is called the environment.\nThese interact continually, the agent selecting actions and the environment responding to those actions and presenting new situations to the agent.\nThe environment also gives rise to rewards, special numerical values that the agent seeks to maximize over time through its choice of actions.\n\n\n\n\n\nThe agent–environment interaction in a Markov decision process\n\n\n\nThe agent and environment interact at each of a sequence of discrete time steps, \\(t = 0,1,2,3,\\dots\\)\nAt each time step \\(t\\), the agent receives some representation of the environment’s state, \\(S_t \\in \\mathcal{S}\\), and on that basis selects an action, \\(A_t \\in \\mathcal{A(s)}\\).\nOne time step later, in part as a consequence of its action, the agent receives a numerical reward, \\(R_{t+1} \\in \\mathcal{R} \\subset \\mathbb{R}\\), and finds itself in a new state, \\(S_{t+1}\\).\nThe MDP and agent together thereby give rise to a sequence or trajectory that begins like this: \\[\nS_0, A_0, R_1, S_1, A_1, R_2,S_2, A_2, R_3,\\dots\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#the-agentenvironment-interface-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#the-agentenvironment-interface-1",
    "title": "Summary of Reinforcement Learning",
    "section": "The Agent–Environment Interface",
    "text": "The Agent–Environment Interface\nFor particular values of these random variables, \\(s' \\in\\mathcal{S}\\) and \\(r \\in \\mathcal{R}\\). There is a probability of those values occurring at time \\(\\mathcal{t}\\), given particular values of the preceding state and action: \\[\np(s', r \\mid s, a) \\doteq \\Pr \\{ S_t = s', R_t = r \\mid S_{t-1} = s, A_{t-1} = a \\}, \\text{for all } s',s \\in \\mathcal{S}, r \\in \\mathcal{R}, \\text{and} a \\in \\mathcal{A(s)}  \n\\]\n\\(p(s', r \\mid s, a)\\) is four-argument dynamics function and \\(p\\) specifies a probability distribution for each choice of \\(s\\) and \\(a\\), that is, that: \\[\n\\sum_{s'\\in\\mathcal{S}}\\sum_{r\\in\\mathcal{R}}p(s', r \\mid s, a) = 1, \\text{for all } s \\in \\mathcal{S}, a \\in \\mathcal{A(s)}\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#the-agentenvironment-interface-2",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#the-agentenvironment-interface-2",
    "title": "Summary of Reinforcement Learning",
    "section": "The Agent–Environment Interface",
    "text": "The Agent–Environment Interface\nFrom the four-argument dynamics function, \\(p\\), one can compute anything else one might want to know about the environment, such as the state-transition probabilities (which we denote, with a slight abuse of notation, as a three-argument function \\(p:\\mathcal{S}\\times\\mathcal{S}\\times\\mathcal{A}\\to [0,1]\\) \\[\np(s' \\mid s, a) \\doteq \\Pr \\{S_t=s'\\mid S_{t-1} = s, A_{t-1} = a\\} = \\sum_{r \\in\\mathcal{R}}p(s', r \\mid s, a)\n\\]\nWe can also compute the expected rewards for state–action pairs as a two-argument function \\(r:\\mathcal{S} \\times \\mathcal{A} \\to \\mathbb{R}\\)\n\\[\nr(s,a) \\doteq \\mathbb{E}[R_t \\mid S_{t-1}=s,A_{t-1} = a] = \\sum_{r\\in \\mathcal{R}}r\\sum_{s'\\in \\mathcal{S}}p(s',r \\mid s, a)\n\\]\nand the expected rewards for state–action–next-state triples as a three-argument function \\(r:\\mathcal{S}\\times\\mathcal{A}\\times\\mathcal{S}\\to \\mathbb{R},\\) \\[\nr(s,a, s') \\doteq \\mathbb{E}[R_t \\mid S_{t-1}=s,A_{t-1} = a, S_t=s'] =  \\sum_{r \\in\\mathcal{R}}r \\frac{p(s', r \\mid s, a)}{p(s' \\mid s, a)}\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#returns-and-episodes",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#returns-and-episodes",
    "title": "Summary of Reinforcement Learning",
    "section": "Returns and Episodes",
    "text": "Returns and Episodes\nThe agent’s goal is to maximize the cumulative reward it receives in the long run. If the sequence of rewards received after time step \\(t\\) is denoted as \\(R_{t+1}, R_{t+2}, R_{t+3}, \\ldots\\). In general, we seek to maximize the expected return, where the return, denoted \\(G_t\\), is defined as some specific function of the reward sequence. In the simplest case the return is the sum of the rewards: \\[\nG_t \\doteq R_{t+1} + R_{t+2} + R_{t+3}+ \\dots+R_T\n\\]\nWhen the agent–environment interaction breaks naturally into subsequences, which we call episodes such as plays of a game, trips through a maze, or any sort of repeated interaction."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#returns-and-episodes-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#returns-and-episodes-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Returns and Episodes",
    "text": "Returns and Episodes\nDiscounting is a technique used to prioritize immediate rewards over future rewards. The idea is to multiply future rewards by a factor \\(\\gamma\\) (the discount factor) which lies between 0 and 1. This makes future rewards worth less than immediate rewards. The return \\(G_t\\) with discounting is defined as:\n\\[\nG_t \\doteq R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\cdots = \\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1}\n\\]\nReturns at successive time steps are related to each other in a way that is important for the theory and algorithms of reinforcement learning:\n\\[\n\\begin{aligned}\nG_t &\\doteq R_{t+1} + \\gamma R_{t+2} + \\gamma^2 R_{t+3} + \\gamma^3 R_{t+4}+\\dots \\\\\n& = R_{t+1} + \\gamma \\big(R_{t+2} + \\gamma R_{t+3} + \\gamma^2 R_{t+4}+\\dots \\big) \\\\\n& = R_{t+1} + \\gamma G_{t+1}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions",
    "title": "Summary of Reinforcement Learning",
    "section": "Policies and Value Functions",
    "text": "Policies and Value Functions\n\nAlmost all reinforcement learning algorithms involve estimating value functions—functions of states (or of state–action pairs) that estimate how good it is for the agent to be in a given state (or how good it is to perform a given action in a given state).\nThe notion of “how good” here is defined in terms of future rewards that can be expected, or, to be precise, in terms of expected return.\nFormally, a policy is a mapping from states to probabilities of selecting each possible action. If the agent is following policy \\(\\pi\\) at time \\(t\\), then \\(\\pi(a \\mid s)\\) is the probability that \\(A_t = a\\) if \\(S_t = s\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions-continued",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions-continued",
    "title": "Summary of Reinforcement Learning",
    "section": "Policies and Value Functions (continued)",
    "text": "Policies and Value Functions (continued)\nThe value function of a state \\(s\\) under a policy \\(\\pi\\), denoted \\(v_\\pi(s)\\), is the expected return when starting in \\(s\\) and following \\(\\pi\\) thereafter. For MDPs, we can define \\(v_\\pi\\) formally by \\[\nv_\\pi(s) \\doteq \\mathbb{E}_\\pi[G_t | S_t=s] = \\mathbb{E}_\\pi\\left[\\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} \\middle| S_t=s\\right], \\text{ for all } s \\in \\mathcal{S}\n\\]\nwhere \\(\\mathbb{E}[\\cdot]\\) denotes the expected value of a random variable given that the agent follows policy \\(\\pi\\), and \\(t\\) is any time step.\nSimilarly, we define the value of taking action \\(a\\) in state \\(s\\) under a policy \\(\\pi\\), denoted \\(q(s, a)\\), as the expected return starting from \\(s\\), taking the action \\(a\\), and thereafter following policy \\(\\pi\\):\n\\[\nq_\\pi(s, a) \\doteq \\mathbb{E}_\\pi[G_t | S_t=s, A_t=a] = \\mathbb{E}_\\pi\\left[\\sum_{k=0}^{\\infty} \\gamma^k R_{t+k+1} \\middle| S_t=s,A_t=a \\right].\n\\]\nWe call \\(q_\\pi\\) the action-value function for policy \\(\\pi\\)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions-continued-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions-continued-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Policies and Value Functions (continued)",
    "text": "Policies and Value Functions (continued)\nBellman Equations\nA fundamental property of value functions used throughout reinforcement learning and dynamic programming is that they satisfy recursive relationships similar to that which we have already established for returns. These recursive relationships are known as the Bellman equations.\nFor the state-value function \\(v_\\pi\\), the Bellman equation is:\n\\[\n\\begin{aligned}\nv_\\pi(s) &\\doteq \\mathbb{E}_\\pi \\big[G_t \\mid S_t = s \\big] \\\\\n&= \\mathbb{E}_\\pi \\big[ R_{t+1} + \\gamma G_{t+1} \\mid S_t = s \\big] \\\\\n&= \\sum_a\\pi(a | s) \\sum_{s^{'}}\\sum_r p(s', r | s, a) \\big[r+\\mathbb{E}_\\pi[G_{t+1}|S_{t+1} = s'] \\big] \\\\\n&= \\sum_a\\pi(a | s)\\sum_{s^{'}, r}p(s', r | s, a)\\big[r+v_\\pi(s') \\big], \\:\\: \\text{for all } s \\in \\mathcal{S}   \n\\end{aligned}\n\\]\nThis equation expresses the value of a state \\(s\\) under a policy \\(\\pi\\) as the expected return starting from \\(s\\), taking the action prescribed by \\(\\pi\\), and thereafter following \\(\\pi\\)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions-continued-2",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policies-and-value-functions-continued-2",
    "title": "Summary of Reinforcement Learning",
    "section": "Policies and Value Functions (continued)",
    "text": "Policies and Value Functions (continued)\nBellman Equations\nFor the action-value function \\(q_\\pi\\), the Bellman equation is:\n\\[\nq_\\pi(s, a) = \\mathbb{E}_\\pi \\big[ R_{t+1} + \\gamma q_\\pi(S_{t+1}, A_{t+1}) \\mid S_t = s, A_t = a \\big]\n\\]\nThis equation expresses the value of taking action \\(a\\) in state \\(s\\) under a policy \\(\\pi\\) as the expected return starting from \\(s\\), taking action \\(a\\), and thereafter following \\(\\pi\\).\nThese Bellman equations form the basis for many reinforcement learning algorithms, as they provide a way to iteratively compute the value functions."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#optimal-policies-and-optimal-value-functions",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#optimal-policies-and-optimal-value-functions",
    "title": "Summary of Reinforcement Learning",
    "section": "Optimal Policies and Optimal Value Functions",
    "text": "Optimal Policies and Optimal Value Functions\n\nAn optimal policy is a policy that achieves the maximum expected return from any initial state.\nThe optimal state-value function \\(v_*\\) is the maximum value function over all policies: \\[\nv_*(s) = \\max_\\pi v_\\pi(s), \\text{ for all } s \\in \\mathcal{S}\n\\]\nThe optimal action-value function \\(q_*\\) is the maximum action-value function over all policies: \\[\nq_*(s, a) = \\max_\\pi q_\\pi(s, a), \\text{ for all } s \\in \\mathcal{S}, a \\in \\mathcal{A}(s)\n\\]\nThe Bellman optimality equation for \\(v_*\\) is: \\[\nv_*(s) = \\max_a \\sum_{s', r} p(s', r \\mid s, a) \\big[ r + \\gamma v_*(s') \\big]\n\\]\nThe Bellman optimality equation for \\(q_*\\) is: \\[\nq_*(s, a) = \\sum_{s', r} p(s', r \\mid s, a) \\big[ r + \\gamma \\max_{a'} q_*(s', a') \\big]\n\\]\nSolving these equations gives us the optimal value functions, from which we can derive the optimal policy."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#dynamic-programming-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#dynamic-programming-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Dynamic Programming",
    "text": "Dynamic Programming\n\nThe key idea of DP, and of reinforcement learning generally, is the use of value functions to organize and structure the search for good policies.\nWe can obtain optimal policies once we have found the optimal value functions, \\(v_*\\) or \\(q_*\\), which satisfy the Bellman optimality equations:\n\n\\[\n\\begin{aligned}\nv_*(s) &= \\max_a \\mathbb{E} \\big[R_{t+1} + \\gamma v_*(S_{t+1}) \\mid S_{t} = s, A_{t} = a  \\big] \\\\\n       &= \\max_a \\sum_{s',r}p(s',r|s,a) \\big[r+\\gamma v_*(s')],\n\\end{aligned}\n\\]\nor \\[\n\\begin{aligned}\nq_*(s) &= \\max_a \\mathbb{E} \\big[R_{t+1} + \\gamma \\max_{a'}q_*(S_{t+1}, a') \\mid S_{t} = s, A_{t} = a  \\big] \\\\\n       &= \\sum_{s',r}p(s',r \\mid s, a ) \\big[r+\\gamma \\max_{a'}q_*(s', a') \\big]\n\\end{aligned}\n\\]\nfor all \\(s \\in \\mathcal{S}, a \\in \\mathcal{A(s)}\\), and \\(s' \\in \\mathcal{S}^+\\)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-evalulation-prediction",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-evalulation-prediction",
    "title": "Summary of Reinforcement Learning",
    "section": "Policy Evalulation (Prediction)",
    "text": "Policy Evalulation (Prediction)\nFirst we consider how to compute the state-value function \\(v_\\pi\\) for an arbitrary policy \\(\\pi\\). This is called policy evaluation in the DP literature. We also refer to it as the *prediction problem. \\[\n\\begin{aligned}\nv_\\pi(s) &\\doteq \\mathbb{E}_\\pi \\big[G_t \\mid S_t = s \\big] \\\\\n         &= \\mathbb{E}_\\pi \\big[R_{t+1} + \\gamma G_{t+1} \\mid S_t = s \\big] \\\\\n         &= \\mathbb{E}_\\pi \\big[R_{t+1} + \\gamma v_\\pi(S_{t+1}) \\mid S_t = s \\big] \\\\\n         &= \\sum_a \\pi(a \\mid s) \\sum_{s',r} p(s', r \\mid s, a) \\big[ r + \\gamma v_\\pi(s') \\big].\n\\end{aligned}\n\\]\nwhere \\(\\pi(a|s)\\) is the probability of taking action \\(\\alpha\\) in state \\(s\\) under policy \\(\\pi\\), and the expectations are subscripted by \\(\\pi\\) to indicate that they are conditional on \\(\\pi\\) being followed.\nConsider a sequence of approximate value functions \\(v_0, v_1, v_2,\\dots,\\) each mapping \\(\\mathcal{S}^+\\) to \\(\\mathbb{R}\\) (the real numbers). The initial approximation, \\(v_0\\), is chosen arbitrarily (except that the terminal state, if any, must be given value 0), and each successive approximation is obtained by using the Bellman equation for \\(v_\\pi\\) as an update rule:\n\\[\n\\begin{aligned}\nv_{k+1}(s) &\\doteq \\mathbb{E}_\\pi \\big[R_{t+1} + \\gamma v_k(S_{t+1}) \\mid S_t = s \\big] \\\\\n         &= \\sum_a \\pi(a \\mid s) \\sum_{s',r} p(s', r \\mid s, a) \\big[ r + \\gamma v_k(s') \\big].\n\\end{aligned}\n\\]\nfor all \\(s \\in \\mathcal{S}\\). Clearly, \\(v_k = v_\\pi\\) is a fixed point for this update rule because the Bellman equation for \\(v_\\pi\\) assures us of equality in this case."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-evalulation-prediction-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-evalulation-prediction-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Policy Evalulation (Prediction)",
    "text": "Policy Evalulation (Prediction)\nThe sequence \\({v_k}\\) can be shown in general to converge to \\(v_\\pi\\) as \\(k \\rightarrow \\infty\\) under the same conditions that guarantee the existence of \\(v_\\pi\\). This algorithm is called iterative policy evaluation.\n\n\n\nIterative Policy Evaluation, for estimating \\(V \\approx \\pi_*\\)\n\n\n\nInput \\(\\pi\\), the policy to be evaluated\nAlgorithm parameter: a small threshold \\(\\theta &gt;0\\) determining accuracy of estimation\nInitialize \\(V(s)\\) arbitrarily, for \\(s \\in \\mathcal{S}\\), and \\(V(terminal) = 0\\)\nLoop:\n    \\(\\Delta \\gets0\\)\n    Loop for each \\(s \\in \\mathcal{S}\\):\n        \\(v \\gets V(s)\\)\n        \\(V(s) \\gets \\sum_a \\pi(a \\mid s) \\sum_{s',r} p(s', r \\mid s, a) \\big[ r + \\gamma V(s') \\big]\\)\n        \\(\\Delta \\gets \\max(\\Delta, |v - V(s)|)\\)\n    until \\(\\Delta &lt; \\theta\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-improvement",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-improvement",
    "title": "Summary of Reinforcement Learning",
    "section": "Policy Improvement",
    "text": "Policy Improvement\n\n\nWe know how good it is to follow the current policy from \\(s\\)—that is \\(v_\\pi(s)\\)—but would it be better or worse to change to the new policy? One way to answer this question is to consider selecting \\(a\\) in \\(s\\) and thereafter following the existing policy \\(\\pi\\).\nThis leads to the definition of the q-value of a state-action pair:\n\\[\n\\begin{aligned}\nq_\\pi(s, a) &\\doteq \\mathbb{E} \\big[ R_{t+1} + \\gamma v_\\pi(S_{t+1}) \\mid S_t = s, A_t = a \\big] \\\\\n     &= \\sum_{s', r} p(s', r \\mid s, a) \\big[ r + \\gamma v_\\pi(s') \\big].\n\\end{aligned}\n\\]\n\nThe policy improvement theorem states that if we improve the policy by acting greedily with respect to \\(q_\\pi\\), the new policy \\(\\pi'\\) will be at least as good as \\(\\pi\\).\nFormally, if\n\\[\n\\begin{aligned}\n\\pi'(s) &= \\arg\\max_a q_\\pi(s, a) \\\\\n&= \\arg \\max_a \\mathbb{E} \\big[R_{t+1}+\\gamma v_\\pi(S_{t+1}) \\mid S_t=s, A_t=a \\big] \\\\\n&= \\arg \\max_a \\sum_{s',r}p(s',r \\mid s, a) \\big[r+\\gamma v_\\pi(s') \\big]\n\\end{aligned}\n\\]\nthen\n\\[\nv_{\\pi'}(s) \\geq v_\\pi(s).\n\\]\nfor all \\(s \\in \\mathcal{S}\\)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-iteration",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-iteration",
    "title": "Summary of Reinforcement Learning",
    "section": "Policy Iteration",
    "text": "Policy Iteration\nOnce a policy, \\(\\pi\\), has been improved using \\(v_\\pi\\) to yield a better policy, \\(\\pi^{'}\\), we can then compute \\(v_{\\pi^{'}}\\) and improve it again to yield an even better \\(\\pi^{''}\\). We can thus obtain a sequence of monotonically improving policies and value functions:\n\\[\n\\pi_0 \\xrightarrow E v_{\\pi_0} \\xrightarrow I \\pi_1 \\xrightarrow E v_{\\pi_1}\\xrightarrow I \\pi_2,\\dots,\\xrightarrow I \\pi_* \\xrightarrow E v_*\n\\]\nwhere \\(\\xrightarrow E\\) denotes a policy evaluation and \\(\\xrightarrow I\\) denotes a policy improvement. This way of finding an optimal policy is called policy iteration."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-iteration-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#policy-iteration-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Policy Iteration",
    "text": "Policy Iteration\nA complete policy iteration algorithm\n\n\n\nPolicy Iteration (using iterative policy evaluation) for estimating \\(\\pi \\approx \\pi_*\\)\n\n\n\n1. Initilaization:\n   \\(V(s) \\in \\mathbb{R}\\) and \\(\\pi(s) \\in \\mathcal{A(s)}\\) arbitrarily for all \\(s \\in \\mathcal{S}\\); \\(V(terminal) = 0\\)\n2. Policy Evaluation\n   Loop:\n       \\(\\Delta \\gets 0\\)\n       Loop for each \\(s \\in \\mathcal{S}\\):\n           \\(v \\gets V(s)\\)\n           \\(V(s) \\gets \\sum_{s',r} p(s', r \\mid s, \\pi(s)) \\big[ r + \\gamma V(s') \\big]\\)\n           \\(\\Delta \\gets \\max(\\Delta, |v - V(s)|)\\)\n   until \\(\\Delta &lt; \\theta\\)\n3. Policy Improvement\n   policy-stable \\(\\gets\\) true\n   For each \\(s \\in \\mathcal{S}\\):\n       old-action \\(\\gets \\pi(s)\\)\n       \\(\\pi(s) \\gets \\arg \\max_a \\sum_{s',r} p(s', r \\mid s, a) \\big[ r + \\gamma V(s') \\big]\\)\n       If old-action \\(\\neq\\) \\(\\pi(s)\\), then policy-stable \\(\\gets\\) false\n   If policy-stable, then stop and return \\(V \\approx v_*\\) and \\(\\pi \\approx \\pi_*\\); else go to 2"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#value-iteration",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#value-iteration",
    "title": "Summary of Reinforcement Learning",
    "section": "Value Iteration",
    "text": "Value Iteration\n\nOne drawback to policy iteration is that each of its iterations involves policy evaluation, which may itself be a protracted iterative computation requiring multiple sweeps through the state set.\nValue iteration is a special case of policy iteration where the policy evaluation step is truncated to just one sweep.\nThis algorithm combines the policy improvement and truncated policy evaluation steps into a single update operation:\n\n\\[\n\\begin{aligned}\nv_{k+1}(s) &= \\mathbb{E} \\big[R_{t+1} + \\gamma v_k(S_{t+1}) \\mid S_t=s, A_t = a \\big] \\\\\n       &=\\max_a \\sum_{s', r} p(s', r \\mid s, a) \\big[ r + \\gamma v_k(s') \\big]\n\\end{aligned}\n\\]\nfor all \\(s \\in \\mathcal{S}\\)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#value-iteration-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#value-iteration-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Value Iteration",
    "text": "Value Iteration\n\nValue iteration is obtained simply by turning the Bellman optimality equation into an update rule.\nAlso note how the value iteration update is identical to the policy evaluation update except that it requires the maximum to be taken over all actions.\n\n\n\n\nValue Iteration, for estimating \\(\\pi \\approx \\pi_*\\)\n\n\nAlgorithm parameter: a small threshold \\(\\theta &gt; 0\\) determining accuracy of estimation\nInitialize \\(V(s)\\) arbitrarily, for all \\(s \\in \\mathcal{S}^+\\), and \\(V(terminal) = 0\\)\nLoop:\n    \\(\\Delta \\gets 0\\)\n    Loop for each \\(s \\in \\mathcal{S}\\):\n        \\(v \\gets V(s)\\)\n        \\(V(s) \\gets \\max_a \\sum_{s', r} p(s', r \\mid s, a) \\big[ r + \\gamma V(s') \\big]\\)\n        \\(\\Delta \\gets \\max(\\Delta, |v - V(s)|)\\)\nuntil \\(\\Delta &lt; \\theta\\)\nOutput a deterministic policy, \\(\\pi \\approx \\pi_*\\), such that\n  \\(\\pi(s) = \\arg\\max_a \\sum_{s', r} p(s', r \\mid s, a) \\big[ r + \\gamma V(s') \\big]\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#generalized-policy-iteration",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#generalized-policy-iteration",
    "title": "Summary of Reinforcement Learning",
    "section": "Generalized Policy Iteration",
    "text": "Generalized Policy Iteration\n\n\n\nThe term generalized policy iteration (GPI) is to the general idea of letting policy-evaluation and policyimprovement processes interact, independent of the granularity and other details of the two processes.\nAlmost all reinforcement learning methods are well described as GPI. That is, all have identifiable policies and value functions, with the policy always being improved with respect to the value function and the value function always being driven toward the value function for the policy, as suggested by the diagram to the right.\nIf both the evaluation process and the improvement process stabilize, that is, no longer produce changes, then the value function and policy must be optimal. The value function stabilizes only when it is consistent with the current policy, and the policy stabilizes only when it is greedy with respect to the current value function"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-methods-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-methods-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Monte Carlo Methods",
    "text": "Monte Carlo Methods\n\nMonte Carlo methods are ways of solving the reinforcement learning problem based on averaging sample returns.\nTo ensure that well-defined returns are available, here we define Monte Carlo methods only for episodic tasks. That is, we assume experience is divided into episodes, and that all episodes eventually terminate no matter what actions are selected.\nOnly on the completion of an episode are value estimates and policies changed. Monte Carlo methods can thus be incremental in an episode-by-episode sense, but not in a step-by-step (online) sense.\nThe term “Monte Carlo” is often used more broadly for any estimation method whose operation involves a significant random component."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-prediction",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-prediction",
    "title": "Summary of Reinforcement Learning",
    "section": "Monte Carlo Prediction",
    "text": "Monte Carlo Prediction\n\nSuppose we wish to estimate \\(v_{\\pi}(s)\\), the values of a state \\(s\\) under policy \\(\\pi\\), given a set of episodes obtained by following \\(\\pi\\) and passing through \\(s\\).\nEssentially, the actions taken in every state are determined by the probabilities defined by the policy \\(\\pi\\).\n\n\n\n\nMonte Carlo ES (Exploring Starts), for estimating \\(\\pi \\approx \\pi_*\\)\n\n\n\nInitilaize:\n    \\(\\pi(s) \\in \\mathcal{A(s)}\\) (arbitrarily), for all \\(s \\in \\mathcal{S}\\)\n    \\(V(s) \\in \\mathbb{R}\\), arbitrarily, for all \\(s \\in \\mathcal{S}\\)\n    \\(Returns \\leftarrow\\) an empity list for all \\(s \\in \\mathcal{S}\\)\nLoop forever (for each episode):\n    Generate an episode following \\(\\pi: S_0,A_0,R_1,\\dots,S_{T-1},A_{T-1},R_T\\)\n    \\(G \\leftarrow0\\)\n    Loop for each step of episode following, \\(t=T-1, T-2, \\dots, 0:\\)\n        \\(G \\leftarrow \\gamma G+R_{t+1}\\)\n        Unless the pair \\(S_t\\), appears in \\(S_0, S_1, \\dots, S_{t-1}:\\)\n            Append \\(G\\) to \\(Returns(S_t)\\)\n            \\(V(s) \\leftarrow\\) average(\\(Returns(S_t)\\))"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-control",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-control",
    "title": "Summary of Reinforcement Learning",
    "section": "Monte Carlo Control",
    "text": "Monte Carlo Control\nAlternating complete steps of policy evaluation and policy improvement are performed, beginning with an arbitrary policy \\(\\pi_0\\) and ending with the optimal policy and optimal action-value function:\n\\[\n\\pi_0 \\xrightarrow E q_{\\pi_0} \\xrightarrow I \\pi_1 \\xrightarrow E q_{\\pi_1}\\xrightarrow I \\pi_2,\\dots,\\xrightarrow I \\pi_* \\xrightarrow E q_*\n\\]\n\n\n\nMonte Carlo ES (Exploring Starts), for estimating \\(\\pi \\approx \\pi_*\\)\n\n\n\nAlgorithm paramater: small \\(\\epsilon&gt;0\\)\nInitilaize:\n    \\(\\pi(s) \\in \\mathcal{A(s)}\\) (arbitrarily), for all \\(s \\in \\mathcal{S}\\)\n    \\(Q(s,a) \\in \\mathbb{R}\\) (arbitrarily), for all \\(s \\in \\mathcal{S}, a \\in \\mathcal{A}\\)\n    \\(Returns(s,a) \\leftarrow\\) empty list, for all \\(s \\in \\mathcal{S}, a \\in \\mathcal{A}\\)\nLoop forever (for each episode):\n    Choose \\(S_0 \\in \\mathcal{S}, A_0 \\in \\mathcal{A}(S_0)\\) randomly such that all pairs have probability &gt; 0\n    Generate an episode from \\(S_0, A_0,\\) following \\(\\pi: S_0,A_0,R_1,\\dots,S_{T-1},A_{T-1},R_T\\)\n    \\(G \\leftarrow0\\)\n    Loop for each step of episode, \\(t=T-1, T-2, \\dots, 0:\\)\n        \\(G \\leftarrow \\gamma G+R_{t+1}\\)\n        Unless the pair \\(S_t, A_t\\) appears in \\(S_0, A_0, S_1, A_1, \\dots, S_{t-1}, A_{t-1}:\\)\n            Append \\(G\\) to \\(Returns(S_t, A_t)\\)\n            \\(Q(S_t, A_t) \\leftarrow\\) average(\\(Returns(S_t, A_t)\\))\n            \\(\\pi(S_t) \\leftarrow \\arg\\max_aQ(S_t,a)\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-control-without-exploring-starts",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-control-without-exploring-starts",
    "title": "Summary of Reinforcement Learning",
    "section": "Monte Carlo Control without Exploring Starts",
    "text": "Monte Carlo Control without Exploring Starts\n\nIn on-policy control methods the policy is generally soft, meaning that \\(\\pi(a\\mid s)&gt;0\\) for all \\(s \\in \\mathcal{S}\\) and all \\(a \\in \\mathcal{A(s)}\\), but gradually shifted closer and closer to a deterministic policy.\nThe on-policy method we present in this section uses \\(\\epsilon\\)-greedy policies, meaning that most of the time they choose an action that has maximal estimated action value, but with probability \\(\\epsilon\\) they instead select an action at random. That is, all nongreedy actions are given the minimal probability of selection, \\(\\frac{\\epsilon}{|\\mathcal{A(s)}|}\\), and the remaining bulk of the probability \\(1-\\epsilon+\\frac{\\epsilon}{|\\mathcal{A(s)}|}\\) is given to the greedy action.\n\\(\\epsilon\\)-greedy policies are examples of \\(\\epsilon-soft\\) policies, definied as policies for which \\(\\pi(a \\mid s) \\geq \\frac{\\epsilon}{|\\mathcal{A(s)}|}\\) for all states and actions, for some \\(\\epsilon &gt; 0\\). Among \\(\\epsilon\\)-soft policies, \\(\\epsilon\\)-greedy policies are in some sense those that are closest to greedy."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-control-without-exploring-starts-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#monte-carlo-control-without-exploring-starts-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Monte Carlo Control without Exploring Starts",
    "text": "Monte Carlo Control without Exploring Starts\n\n\n\nOn-policy first-visit MC control (for \\(\\epsilon\\)-soft policies), estimates \\(\\pi \\approx \\pi_*\\)\n\n\n\nAlgorithm paramater: small \\(\\epsilon&gt;0\\)\nInitilaize:\n    \\(\\pi \\leftarrow\\) an arbitrary \\(\\epsilon\\)-soft policy\n    \\(Q(s,a) \\in \\mathbb{R}\\) (arbitrarily), for all \\(s \\in \\mathcal{S}, a \\in \\mathcal{A}\\)\nRepeat forever (for each episode):\n    Generate an episode following \\(\\pi: S_0,A_0,R_1,\\dots,S_{T-1},A_{T-1},R_T\\)\n    \\(G \\leftarrow0\\)\n    Loop for each step of episode following, \\(t=T-1, T-2, \\dots, 0:\\)\n        \\(G \\leftarrow \\gamma G+R_{t+1}\\)\n        Unless the pair \\(S_t, A_t\\) appears in \\(S_0, A_0, S_1, A_1, \\dots, S_{t-1}, A_{t-1}:\\)\n            Append \\(G\\) to \\(Returns(S_t, A_t)\\)\n            \\(Q(S_t, A_t) \\leftarrow\\) average(\\(Returns(S_t, A_t)\\))\n            \\(A^* \\leftarrow \\arg\\max_aQ(S_t,a)\\) (with ties broken arbitrarily)\n            For all \\(a \\in \\mathcal{A(S_t)}\\):\n            \\(\\pi(a \\mid s) = \\begin{cases}  1 - \\epsilon + \\frac{\\epsilon}{|\\mathcal{A}(s)|} & \\text{if } a = \\arg\\max_{a'} q(s, a') \\\\ \\frac{\\epsilon}{|\\mathcal{A}(s)|} & \\text{otherwise} \\end{cases}\\)\n\n\n\nwhere \\(|\\mathcal{A}(s)|\\) is the number of actions available in state \\(s\\).\nThe \\(\\epsilon\\)-greedy policy ensures that all actions are tried, but actions with higher value estimates are tried more frequently. This balances exploration (trying new actions) and exploitation (choosing the best-known action)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-prediction-via-importance-sampling",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-prediction-via-importance-sampling",
    "title": "Summary of Reinforcement Learning",
    "section": "Off-policy Prediction via Importance Sampling",
    "text": "Off-policy Prediction via Importance Sampling\n\nThe policy being learned about is called the target policy, and the policy used to generate behavior is called the behavior policy.\nIn this case we say that learning is from data “off” the target policy, and the overall process is termed off-policy learning. That is, The process of learning the target policy from the behavior policy’s data is called off-policy learning\nWe apply importance sampling to off-policy learning by weighting returns according to the relative probability of their trajectories occurring under the target and behavior policies, called the importance-sampling ratio."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-prediction-via-importance-sampling-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-prediction-via-importance-sampling-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Off-policy Prediction via Importance Sampling",
    "text": "Off-policy Prediction via Importance Sampling\nGiven a starting state \\(S_t\\), the probability of the subsequent state–action trajectory, \\(A_t, S_{t+1},A_{t+1}, \\dots ,S_T\\) , occurring under any policy \\(\\pi\\) is\n\\[\n\\begin{aligned}\nPr\\{A_t,S_{t+1},A_{t+1},\\dots, S_T \\mid S_t, A_{t:T-1} \\} &= \\pi(A_t \\mid S_t) p(S_{t+1} \\mid S_t, A_t) \\pi(A_{t+1} \\mid S_{t+1}),\\dots, p(S_T \\mid S_{T-1}, A_{T-1})   \\\\\n       &= \\prod_{k=1}^{T-1}\\pi(A_k \\mid S_k) p(S_{k+1} \\mid S_k, A_k ),\n\\end{aligned}\n\\]\nwhere \\(p\\) here is the state-transition probability function. Thus, the relative probability of the trajectory under the target and behavior policies (the importance sampling ratio) is\n\\[\n\\rho_{t:T-1} \\doteq \\frac{\\prod_{k=1}^{T-1}\\pi(A_k \\mid S_k) p(S_{k+1} \\mid S_k, A_k )}{\\prod_{k=1}^{T-1}b(A_k \\mid S_k) p(S_{k+1} \\mid S_k, A_k )} = \\prod_{k=1}^{T-1}\\frac{\\pi(A_k \\mid S_k)}{b(A_k \\mid S_k)}\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-prediction-via-importance-sampling-continued",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-prediction-via-importance-sampling-continued",
    "title": "Summary of Reinforcement Learning",
    "section": "Off-policy Prediction via Importance Sampling (continued)",
    "text": "Off-policy Prediction via Importance Sampling (continued)\nThe \\(\\rho_{t:T-1}\\) transforms the returns to have the right expected value:\n\\[\n\\mathbb{E} \\big[\\rho_{t:T-1}G_t \\mid S_t = s \\big] = v_\\pi(s)\n\\]\nOrdinary importance sampling\nTo estimate \\(v_\\pi(s)\\), we simply scale the returns by the ratios and average the results:\n\\[\nV(s) \\doteq \\frac{\\sum_{t \\in \\mathcal{J}(s)}\\rho_{t:T(t)-1}G_t}{|\\mathcal{J}(s)|}\n\\]\nwhere \\(\\mathcal{J}(s)\\) includes time steps that were first visits to \\(s\\) within their episodes. \\(T(t)\\) denote the first time of termination following time t, and \\(G_t\\) denote the return after \\(t\\) up through \\(T(t)\\). Then \\(\\{G_t\\}_{t \\in \\mathcal{J}(s)}\\) are the returns that pertain to state \\(s\\), and \\(\\{ \\rho_{t:T(t)-1} \\}_{t \\in \\mathcal{J}(s)}\\) are the corresponding importance-sampling ratios.\nWeighted importance sampling\n\\[\nV(s) \\doteq \\frac{\\sum_{t \\in \\mathcal{J}(s)}\\rho_{t:T(t)-1}G_t}{\\sum_{t \\in \\mathcal{J}(s)}\\rho_{t:T(t)-1}}\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#incremental-implementation",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#incremental-implementation",
    "title": "Summary of Reinforcement Learning",
    "section": "Incremental Implementation",
    "text": "Incremental Implementation\nSuppose we have a sequence of returns \\(G_1,G_2,\\dots,G_{n−1}\\), all starting in the same state and each with a corresponding random weight \\(W_i \\text{ } (\\text{e.g.}, W_i = \\rho_{t_i:T(t_i)-1})\\). We wish to form the estimate\n\\[\nV_n \\doteq \\frac{\\sum_{k=1}^{n-1}W_kG_k}{\\sum_{k=1}^{n-1}W_k}, \\:\\:\\: n \\geq 2,\n\\]\nand keep it up-to-date as we obtain a single additional return \\(G_n\\). In addition to keeping track of \\(V_n\\), we must maintain for each state the cumulative sum \\(C_n\\) of the weights given to the first \\(n\\) returns. The update rule for \\(V_n\\) is\n\\[\nV_{n+1} \\doteq V_n + \\frac{W_n}{C_n} \\big[G_n - V_n \\big], \\:\\:\\: n \\geq 1,\n\\]\nand\n\\[\nC_{n+1} \\doteq C_n + W_{n+1},\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#incremental-implementation-continued",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#incremental-implementation-continued",
    "title": "Summary of Reinforcement Learning",
    "section": "Incremental Implementation (continued)",
    "text": "Incremental Implementation (continued)\nA complete episode-by-episode incremental algorithm for Monte Carlo policy evaluation.\n\n\n\nOff-policy MC prediction (policy evaluation) for estimating \\(Q \\approx q_\\pi\\)\n\n\nInput: an arbitrary target policy \\(\\pi\\)\nInitialize, for all \\(s \\in \\mathcal{S}, a \\in \\mathcal{A(s)}\\):\n    \\(Q(s,a) \\in \\mathbb{R}\\) (arbitrarily)\n    \\(C(s,a) \\gets0\\)\nLoop forever (for each episode):\n    \\(b \\gets\\) any policy with coverage of \\(\\pi\\)\n    Generate an episode following \\(b: S_0, A_0, R_1, \\dots, S_{T-1}, A_{T-1}, R_T\\)\n    \\(G \\gets 0\\)\n    \\(W \\gets 1\\)\n    Loop for each step of episode, \\(t = T-1, T-2, \\dots, 0,\\) while \\(W \\neq 0\\):\n        \\(G \\gets \\gamma G + R_{t+1}\\)\n        \\(C(S_t, A_t) \\gets C(S_t, A_t) + W\\)\n        \\(Q(S_t, A_t) \\gets Q(S_t, A_t) + \\frac{W}{C(S_t, A_t)} \\big[G - Q(S_t, A_t)\\big]\\)\n        \\(W \\gets W \\frac{\\pi(A_t \\mid S_t)}{b(A_t \\mid S_t)}\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-monte-carlo-control",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#off-policy-monte-carlo-control",
    "title": "Summary of Reinforcement Learning",
    "section": "Off-policy Monte Carlo Control",
    "text": "Off-policy Monte Carlo Control\n\nThe policy used to generate behavior, called the behavior policy, may in fact be unrelated to the policy that is evaluated and improved, called the target policy/\nAn advantage of this separation is that the target policy may be deterministic (e.g., greedy), while the behavior policy can continue to sample all possible actions.\n\n\n\n\nOff-policy MC prediction (policy evaluation) for estimating \\(\\pi \\approx \\pi_*\\)\n\n\nInput: an arbitrary target policy \\(\\pi\\)\nInitialize, for all \\(s \\in \\mathcal{S}, a \\in \\mathcal{A(s)}\\):\n    \\(Q(s,a) \\in \\mathbb{R}\\) (arbitrarily)\n    \\(C(s,a) \\gets0\\)\n    \\(\\pi(s) \\gets \\arg \\max_aQ(s,a)\\) (with ties broken consistently)\nLoop forever (for each episode):\n    \\(b \\gets\\) any soft policy\n    Generate an episode following \\(b: S_0, A_0, R_1, \\dots, S_{T-1}, A_{T-1}, R_T\\)\n    \\(G \\gets 0\\)\n    \\(W \\gets 1\\)\n    Loop for each step of episode, \\(t = T-1, T-2, \\dots, 0,\\) while \\(W \\neq 0\\):\n        \\(G \\gets \\gamma G + R_{t+1}\\)\n        \\(C(S_t, A_t) \\gets C(S_t, A_t) + W\\)\n        \\(Q(S_t, A_t) \\gets Q(S_t, A_t) + \\frac{W}{C(S_t, A_t)} \\big[G - Q(S_t, A_t)\\big]\\)\n        \\(\\pi(S_t) \\gets \\arg \\max Q(S_t, a)\\) (with ties broken consistently)\n        If \\(A_t \\neq \\pi(S_t)\\) then exit inner Loop (proceed to next episode)\n        \\(W \\gets W \\frac{1}{b(A_t \\mid S_t)}\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#temporal-difference-learning-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#temporal-difference-learning-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Temporal-Difference Learning",
    "text": "Temporal-Difference Learning\n\nTD learning is a combination of Monte Carlo ideas and dynamic programming (DP) ideas.\nLike Monte Carlo methods, TD methods can learn directly from raw experience without a model of the environment’s dynamics.\nLike DP, TD methods update estimates based in part on other learned estimates, without waiting for a final outcome (they bootstrap)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#td-prediction",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#td-prediction",
    "title": "Summary of Reinforcement Learning",
    "section": "TD Prediction",
    "text": "TD Prediction\nWhereas Monte Carlo methods must wait until the end of the episode to determine the increment to \\(V(St)\\) (only then is \\(G_t\\) known), TD methods need to wait only until the next time step. At time t + 1 they immediately form a target and make a useful update using the observed reward \\(R_{t+1}\\) and the estimate \\(V_{S_{t+1}}\\). The simplest TD method makes the update:\n\\[\nV(S_t) \\leftarrow V(S_t) + \\alpha \\big[ R_{t+1} + \\gamma V(S_{t+1})-V(S_t)  \\big]\n\\]\nimmediately on transition to \\(S_{t+1}\\) and receiving \\(R_{t+1}\\). In effect, the target for the Monte Carlo update is \\(G_t\\), whereas the target for the TD update is \\(R_{t+1} + \\gamma V(S_{t+1})\\). This TD method is called TD(0), or one-step TD."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#td-prediction-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#td-prediction-1",
    "title": "Summary of Reinforcement Learning",
    "section": "TD Prediction",
    "text": "TD Prediction\n\n\n\nTabular TD(0) for estimating \\(v_{\\pi}\\)\n\n\nInput: the policy \\(v_{\\pi}\\) to be evaluated\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\)\nInitialize \\(V(s)\\), for all \\(s \\in \\mathcal{S}^+\\), arbitrarily except that \\(V(terminal) = 0\\)\nLoop for each episode:\n    Initialize \\(S\\)\n    Loop for each step of episode:\n        \\(A \\leftarrow\\) action given by \\(\\pi\\) for \\(S\\)\n        Take action \\(A\\), observe \\(R,S^{'}\\)\n        \\(V(S) \\leftarrow V(S)+ \\alpha \\big[R+\\gamma V(S^{'})-V(S)  \\big]\\)\n        \\(S \\leftarrow S^{'}\\)\n    until \\(S\\) is terminal"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#sarsa-on-policy-td-control",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#sarsa-on-policy-td-control",
    "title": "Summary of Reinforcement Learning",
    "section": "Sarsa: On-policy TD Control",
    "text": "Sarsa: On-policy TD Control\nwe consider transitions from state–action pair to state–action pair, and learn the values of state–action pairs.\n\\[\nQ(S_t, A_t) \\leftarrow Q(S_t, A_t) + \\alpha \\big[R_{t+1}+\\gamma Q(S_{t+1}, A_{t+1})-Q(S_t, A_t) \\big]\n\\]\n\n\n\nSarsa (on-policy TD control) for estimating \\(Q \\approx q_*\\)\n\n\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\), small \\(\\epsilon &gt; 0\\)\nInitialize \\(Q(S_t, A_t)\\), for all \\(s \\in \\mathcal{S}^+, \\alpha \\in \\mathcal{A}(s)\\), arbitrarily except that \\(Q(terminal) = 0\\)\nLoop for each episode:\n    Initialize \\(S\\)\n    Choose \\(A\\) from \\(S\\) using policy derived from \\(Q\\) (e.g., \\(\\epsilon\\)-greedy)\n    Loop for each step of episode:\n        Take action \\(A\\), observe \\(R, S^{'}\\)\n        Choose \\(A^{'}\\) from \\(S^{'}\\) using policy derived from \\(Q\\) (e.g., \\(\\epsilon\\)-greedy)\n        \\(Q(S, A) \\leftarrow Q(S, A)+ \\alpha \\big[R+\\gamma Q(S^{'}, A^{'})-Q(S, A)  \\big]\\)\n        \\(S \\leftarrow S^{'}; A \\leftarrow A^{'};\\)\n    until \\(S\\) is terminal"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#q-learning-off-policy-td-control",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#q-learning-off-policy-td-control",
    "title": "Summary of Reinforcement Learning",
    "section": "Q-learning: Off-policy TD Control",
    "text": "Q-learning: Off-policy TD Control\n\nTD control algorithm known as Q-learning (Watkins, 1989), defined by\n\\[\nQ(S_t, A_t) \\leftarrow Q(S_t, A_t)+ \\alpha \\big[R_{t+1}+\\gamma \\max_aQ(S_{t+1}, a)-Q(S_t, A_t)  \\big]\n\\]\nThe Q-learning algorithm is shown below in procedural form.\n\n\n\nQ-learning (off-policy TD control) for estimating \\(\\pi \\approx \\pi_*\\)\n\n\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\), small \\(\\epsilon &gt; 0\\)\nInitialize \\(Q(S_t, A_t)\\), for all \\(s \\in \\mathcal{S}^+, \\alpha \\in \\mathcal{A}(s)\\), arbitrarily except that \\(Q (terminal) = 0\\)\nLoop for each episode:\n    Initialize \\(S\\)\n    Loop for each step of episode:\n        Choose \\(A\\) from \\(S\\) using policy derived from \\(Q\\) (e.g., \\(\\epsilon\\)-greedy)\n        Take action \\(A\\), observe \\(R, S^{'}\\)\n        \\(Q(S, A) \\leftarrow Q(S, A)+ \\alpha \\big[R+ \\gamma \\max_aQ(S^{'}, a)-Q(S, A) \\big]\\)\n        \\(S \\leftarrow S^{'}\\)\n    until \\(S\\) is terminal"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#expected-sarsa",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#expected-sarsa",
    "title": "Summary of Reinforcement Learning",
    "section": "Expected Sarsa",
    "text": "Expected Sarsa\nExpected Sarsa is more complex computationally than Sarsa but, in return, it eliminates the variance due to the random selection of \\(A_{t+1}\\). Given the same amount of experience we might expect it to perform slightly better than Sarsa, and indeed it generally does.\n\n\\[\n\\begin{aligned}\nQ(S_t, A_t) &\\leftarrow Q(S_t, A_t)+ \\alpha \\big[R_{t+1}+\\gamma \\mathbb{E}_{\\pi} [Q(S_{t+1}, A_{t+1} \\mid S_{t+1} \\big] -Q(S_t, A_t)  \\big] \\\\\n       &= Q(S_t, A_t)+ \\alpha \\big[R_{t+1}+\\gamma \\sum_a \\pi(a \\mid S_{t+1})Q(S_{t+1}, a) -Q(S_t, A_t)  \\big]\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#td-prediction-2",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#td-prediction-2",
    "title": "Summary of Reinforcement Learning",
    "section": "TD Prediction",
    "text": "TD Prediction\n\n\n\nTabular TD(0) for estimating \\(v_{\\pi}\\)\n\n\nInput: the policy \\(v_{\\pi}\\) to be evaluated\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\)\nInitialize \\(V(s)\\), for all \\(s \\in \\mathcal{S}^+\\), arbitrarily except that \\(V(terminal) = 0\\)\nLoop for each episode:\n    Initialize \\(S\\)\n    Loop for each step of episode:\n        \\(A \\leftarrow\\) action given by \\(\\pi\\) for \\(S\\)\n        Take action \\(A\\), observe \\(R,S^{'}\\)\n        \\(V(S) \\leftarrow V(S)+ \\alpha \\big[R+\\gamma V(S^{'})-V(S)  \\big]\\)\n        \\(S \\leftarrow S^{'}\\)\n    until \\(S\\) is terminal"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#maximization-bias-and-double-learning",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#maximization-bias-and-double-learning",
    "title": "Summary of Reinforcement Learning",
    "section": "Maximization Bias and Double Learning",
    "text": "Maximization Bias and Double Learning\n\nIn Q-learning and Sarsa algorithms, a maximum over estimated values is used implicitly as an estimate of the maximum value, which can lead to a significant positive bias. This is known as maximization bias. One way to address this issue is to use Double Learning, which reduces the bias by decoupling the selection and evaluation of actions.\nDouble Q-learning maintains two separate estimates of action values, \\(Q_1\\) and \\(Q_2\\). These estimates are updated alternately, and the action selection is based on the sum of these two estimates.\n\\[\n\\begin{aligned}\nQ_1(S_t, A_t) &\\leftarrow Q_1(S_t, A_t) + \\alpha \\big[R_{t+1} + \\gamma Q_2(S_{t+1}, \\arg\\max_a Q_1(S_{t+1}, a)) - Q_1(S_t, A_t) \\big] \\\\\nQ_2(S_t, A_t) &\\leftarrow Q_2(S_t, A_t) + \\alpha \\big[R_{t+1} + \\gamma Q_1(S_{t+1}, \\arg\\max_a Q_2(S_{t+1}, a)) - Q_2(S_t, A_t) \\big]\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#maximization-bias-and-double-learning-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#maximization-bias-and-double-learning-1",
    "title": "Summary of Reinforcement Learning",
    "section": "Maximization Bias and Double Learning",
    "text": "Maximization Bias and Double Learning\n\nThe Double Q-learning algorithm in procedural form:\n\n\n\nDouble Q-learning, for estimating \\(Q_1 \\approx Q_2 \\approx q_*\\)\n\n\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\), small \\(\\epsilon &gt; 0\\)\nInitialize \\(Q_1(S_t, A_t)\\) and \\(Q_2(S_t, A_t)\\), for all \\(s \\in \\mathcal{S}^+, \\alpha \\in \\mathcal{A}(s)\\), such that \\(Q(terminal) = 0\\)\nLoop for each episode:\n    Initialize \\(S\\)\n    Loop for each step of episode:\n        Choose \\(A\\) from \\(S\\) using the policy \\(\\epsilon\\)-greedy in \\(Q_1 + Q_2\\)\n        Take action \\(A\\), observe \\(R, S^{'}\\)\n        With probability 0.5:\n            \\(Q_1(S, A) \\leftarrow Q_1(S, A) + \\alpha \\big[R + \\gamma Q_2(S^{'}, \\arg\\max_a Q_1(S^{'}, a)) - Q_1(S, A) \\big]\\)\n        Otherwise:\n            \\(Q_2(S, A) \\leftarrow Q_2(S, A) + \\alpha \\big[R + \\gamma Q_1(S^{'}, \\arg\\max_a Q_2(S^{'}, a)) - Q_2(S, A) \\big]\\)\n        \\(S \\leftarrow S^{'}\\)\n    until \\(S\\) is terminal"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-bootstrapping-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-bootstrapping-1",
    "title": "Summary of Reinforcement Learning",
    "section": "\\(n\\)-step Bootstrapping",
    "text": "\\(n\\)-step Bootstrapping\n\nn-step TD methods generalize MC and TD(0) methods so that one can shift from one to the other smoothly as needed to meet the demands of a particular task.\nn-step methods span a spectrum with MC methods at one end and one-step TD methods at the other.\nThe best methods are often intermediate between the two extremes."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-td-prediction",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-td-prediction",
    "title": "Summary of Reinforcement Learning",
    "section": "\\(n\\)-step TD Prediction",
    "text": "\\(n\\)-step TD Prediction\n\n\nThe estimate of \\(v_{\\pi}(S_t)\\) is updated in the direction of the complete return:\n\\[\n\\begin{aligned}\nG_t &\\doteq R_{t+1} + \\gamma R_{t+2} + \\gamma R_{t+3} + \\\\\n&\\dots + \\gamma^{T-t-1}R_T\n\\end{aligned}\n\\]\nwhich is the one-step return:\n\\[\nG_{t:t+1} \\doteq R_{t+1} + \\gamma V_t(S_{t+1})\n\\]\nwhere \\(V_t\\) is the estimate at time \\(t\\) of \\(v_{\\pi}\\)\ntwo-step return:\n\\[\nG_{t:t+2} \\doteq R_{t+1}+\\gamma R_{t+2} + \\gamma ^{2} V_{t+1}(S_{t+2})\n\\]\n\n\\(n\\)-step return:\n\\[\nG_{t:t+n} \\doteq R_{t+1}+\\gamma R_{t+2} +\\dots + \\gamma R_{t+n} + \\gamma ^{n} V_{t+n-1}(S_{t+n}),\n\\]\nfor all \\(n, t\\) such that \\(n \\geq 1\\) and \\(0 \\leq t &lt; T-n\\).\nState-value learning algorithm for using n-step returns is\n\\[\nV_{t+n}(S_t) \\doteq V_{t+n-1}(S_t) + \\alpha \\big[G_{t:t+n} - V_{t+n-1}(S_t) \\big]\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-td-prediction-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-td-prediction-1",
    "title": "Summary of Reinforcement Learning",
    "section": "\\(n\\)-step TD Prediction",
    "text": "\\(n\\)-step TD Prediction\n\nComplete pseudocode\n\n\n\n\\(n\\)-step TD for estimating \\(V \\approx v_*\\)\n\n\nInput: a policy \\(\\pi\\)\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\), a positive integer \\(n\\)\nInitialize \\(V(s)\\) arbitrarily, for all \\(s \\in \\mathcal{S}\\)\nAll store and access operations (for \\(S_t\\) and \\(R_t\\)) can take their index model \\(n+1\\)\nLoop for each episode:\n    Initialize and store \\(S_0 \\neq terminal\\)\n    \\(T \\leftarrow \\infty\\)\n    Loop for \\(t= 0,1,2,\\dots\\):\n        If \\(t&lt;T\\), then:\n            Take an action according to \\(\\pi(\\cdot \\mid S_t)\\)\n            Observe and store the next reward as \\(R_{t+1}\\) and the next state as \\(S_{t+1}\\)\n            If \\(S_{t+1}\\) is terminal, then \\(T \\leftarrow t + 1\\)\n        \\(\\tau \\leftarrow t-n+1\\) (\\(\\tau\\) is the time whose state’s estimate is being updated)\n        If \\(\\tau \\geq 0\\):\n            \\(G \\leftarrow \\sum_{i=\\tau+1}^{\\min(\\tau+n, T)}\\gamma^{i-\\tau-1}R_i\\)\n            If \\(\\tau+n &lt; T\\), then: \\(G \\leftarrow G+ \\gamma^{n}V(S_{\\tau+n})\\) (\\(G_{\\tau:\\tau+n}\\))\n            \\(V(S_\\tau) \\leftarrow V(S_\\tau) + \\alpha \\big[G-V(S_\\tau)  \\big]\\)\n    Until \\(\\tau = T-1\\) is terminal"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-sarsa",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-sarsa",
    "title": "Summary of Reinforcement Learning",
    "section": "\\(n\\)-step Sarsa",
    "text": "\\(n\\)-step Sarsa\n\n\\(n\\)-step returns (update targets) are redefined in terms of estimated action values:\n\\[\nG_{t:t+n} \\doteq R_{t+1}+\\gamma R_{t+2} +\\dots + \\gamma^{n-1} R_{t+n} + \\gamma ^{n} Q_{t+n-1}(S_{t+n}, A_{t+n}),\\: n \\geq1, 0 \\leq t &lt; T-n\n\\]\nwith \\(G_{t:t+n} \\doteq\\) if \\(t+n \\geq T\\). The natural algorithm is then:\n\\[\nQ_{t+n}(S_t, A_t) \\doteq Q_{t+n-1}(S_t, A_t) + \\alpha \\big[G_{t:t+n} - Q_{t+n-1}(S_t, A_t) \\big], \\: \\: 0 \\leq t &lt; T\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-sarsa-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-sarsa-1",
    "title": "Summary of Reinforcement Learning",
    "section": "\\(n\\)-step Sarsa",
    "text": "\\(n\\)-step Sarsa\n\n\n\n\n\\(n\\)-step Sarsa for estimating \\(Q \\approx q_*\\) or \\(q_\\pi\\)\n\n\nInitialize \\(Q(s, a)\\) arbitrarily, for all \\(s \\in \\mathcal{S}\\), and \\(a \\in \\mathcal{A}(s)\\)\nInitialize \\(\\pi\\) to be \\(\\epsilon\\)-greedy with resprecto to \\(Q\\), or to be given a fixed policy\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\), small \\(\\epsilon&gt;0\\), a positive integer \\(n\\)\nAll store and access operations (for \\(S_t\\), \\(A_t\\), and \\(R_t\\)) can take their index modul \\(n+1\\)\nLoop for each episode:\n    Initialize and store \\(S_0 \\neq terminal\\)\n    Choose and store \\(A_0 \\sim \\pi(\\cdot \\mid S_0)\\)\n    \\(T \\leftarrow \\infty\\)\n    Loop for \\(t= 0,1,2,\\dots\\):\n        If \\(t&lt;T\\), then:\n            Take action \\(A_t\\), observe and store the next reward as \\(R_{t+1}\\) and the next state as \\(S_{t+1}\\)\n            If \\(S_{t+1}\\) is terminal, then \\(T \\leftarrow t + 1\\)\n            Else, choose and store \\(A_{t+1} \\sim \\pi(\\cdot \\mid S_{t+1})\\)\n        \\(\\tau \\leftarrow t-n+1\\) (\\(\\tau\\) is the time whose state’s estimate is being updated)\n        If \\(\\tau \\ge 0\\):\n            \\(G \\leftarrow \\sum_{i=\\tau+1}^{\\min(\\tau+n, T)}\\gamma^{i-\\tau-1}R_i\\)\n            If \\(\\tau+n &lt; T\\), then: \\(G \\leftarrow G+ \\gamma^{n}Q(S_{\\tau+n}, A_{\\tau+n})\\) (\\(G_{\\tau:\\tau+n}\\))\n            \\(Q(S_\\tau, A_\\tau) \\leftarrow Q(S_\\tau, A_\\tau) + \\alpha \\big[G-Q(S_\\tau, A_\\tau)  \\big]\\)\n            If \\(\\pi\\) is being learned, then ensure that \\(\\pi(\\cdot \\mid S_\\tau)\\) is \\(\\epsilon\\)-greedy wrt \\(Q\\)\n    Until \\(\\tau = T-1\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-off-policy-learning",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-off-policy-learning",
    "title": "Summary of Reinforcement Learning",
    "section": "\\(n\\)-step Off-policy Learning",
    "text": "\\(n\\)-step Off-policy Learning\n\nTo make a simple off-policy version of \\(n\\)-step TD, the update for time \\(t\\) (actually made at time \\(t + n\\)) can simply be weighted by \\(\\rho_{t:t+n−1}\\):\n\\[\nV_{t+n}(S_t) \\doteq V_{t+n-1}(S_t) + \\alpha \\rho_{t:t+n−1} \\big[G_{t:t+n} - V_{t+n-1}(S_t) \\big], \\: 0 \\leq t &lt; T\n\\]\nwhere \\(\\rho_{t:t+n−1}\\) called the importance sampling ratio, is the relative probability under the two policies of taking the \\(n\\) actions from \\(A_t\\) to \\(A_{t+n-1}\\):\n\\(\\rho_{t:h} \\doteq \\prod_{k=1}^{\\min(h, T-1)}\\frac{\\pi(A_k\\mid A_k)}{b(A_k\\mid A_k)}\\)\nSimilarly, our previous \\(n\\)-step Sarsa update can be completely replaced by a simple off-policy form:\n\\[\nQ_{t+n}(S_t, A_t) \\doteq Q_{t+n-1}(S_t, A_t) + \\alpha \\rho_{t+1:t+n} \\big[G_{t:t+n} - Q_{t+n-1}(S_t, A_t) \\big], \\: \\: 0 \\leq t &lt; T\n\\]"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-off-policy-learning-1",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#n-step-off-policy-learning-1",
    "title": "Summary of Reinforcement Learning",
    "section": "\\(n\\)-step Off-policy Learning",
    "text": "\\(n\\)-step Off-policy Learning\n\n\n\n\nOff-policy \\(n\\)-step Sarsa for estimating \\(Q \\approx q_*\\) or \\(q_\\pi\\)\n\n\nInput: an arbitrary behavior policy \\(b\\) such that \\(b(\\alpha \\mid s)\\), for all \\(s \\in \\mathcal{S}, \\alpha \\in \\mathcal{A}\\)\nInitialize \\(Q(s, a)\\) arbitrarily, for all \\(s \\in \\mathcal{S}, a \\in \\mathcal{A}(s)\\)\nInitialize \\(\\pi\\) to be \\(\\epsilon\\)-greedy with respect to \\(Q\\), or to be given a fixed policy\nAlgorithm parameter: step size \\(\\alpha \\in \\big(0, 1 \\big]\\), a positive integer \\(n\\)\nAll store and access operations (for \\(S_t\\), \\(A_t\\), and \\(R_t\\)) can take their index mod \\(n+1\\)\nLoop for each episode:\n    Initialize and store \\(S_0 \\neq terminal\\)\n    Choose and store \\(A_0 \\sim b(\\cdot \\mid S_0)\\)\n    \\(T \\leftarrow \\infty\\)\n    Loop for \\(t= 0,1,2,\\dots\\):\n        If \\(t&lt;T\\), then:\n            Take action \\(A_t\\), observe and store the next reward as \\(R_{t+1}\\) and the next state as \\(S_{t+1}\\)\n            If \\(S_{t+1}\\) is terminal, then \\(T \\leftarrow t + 1\\)\n            Else, choose and store \\(A_{t+1} \\sim b(\\cdot \\mid S_{t+1})\\)\n        \\(\\tau \\leftarrow t-n+1\\) (\\(\\tau\\) is the time whose state’s estimate is being updated)\n        If \\(\\tau \\ge 0\\):\n            \\(\\rho \\leftarrow \\prod_{i=\\tau+1}^{\\min(\\tau+n, T-1)}\\frac{\\pi(A_i \\mid S_i)}{b(A_i \\mid S_i)}\\) (\\(\\rho_{t+1:t+n}\\))\n            \\(G \\leftarrow \\sum_{i=\\tau+1}^{\\min(\\tau+n, T)}\\gamma^{i-\\tau-1}R_i\\)\n            If \\(\\tau+n &lt; T\\), then: \\(G \\leftarrow G+ \\gamma^{n}Q(S_{\\tau+n}, A_{\\tau+n})\\) (\\(G_{\\tau:\\tau+n}\\))\n            \\(Q(S_\\tau, A_\\tau) \\leftarrow Q(S_\\tau, A_\\tau) + \\alpha \\rho \\big[G-Q(S_\\tau, A_\\tau)  \\big]\\)\n            If \\(\\pi\\) is being learned, then ensure that \\(\\pi(\\cdot \\mid S_\\tau)\\) is \\(\\epsilon\\)-greedy wrt \\(Q\\)\n    Until \\(\\tau = T-1\\)"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#linear-methods",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#linear-methods",
    "title": "Summary of Reinforcement Learning",
    "section": "Linear Methods",
    "text": "Linear Methods\nThe approximation function, \\(\\hat{v}(\\cdot , \\mathbf{w})\\), is a linear function of the weight vector, \\(\\mathbf{w}\\). Corresponding to every state \\(s\\), there is a feature (real-valued) vector \\(\\mathbf{x}(s) \\doteq (x_1(s), x_2(s),\\dots ,x_d(s))^{\\text{T}}\\). The approximate value of state \\(s\\) is given by:\n\\[\n\\hat{v} (s, \\mathbf{w}) \\doteq \\mathbf{w}^{\\text{T}} \\mathbf{x}(s) \\doteq \\sum_{i=1}^d w_i x_i(s).\n\\]\nWhere vector \\(\\mathbf{x}(s)\\) is called a feature vector representing state \\(s\\)."
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#tutorials-on-rl",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/RL_presentation.html#tutorials-on-rl",
    "title": "Summary of Reinforcement Learning",
    "section": "Tutorials on RL",
    "text": "Tutorials on RL"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/10_bandit_simul.html",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/10_bandit_simul.html",
    "title": "About",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\n# Simulation parameters\nnum_bandits = 10                # Number of bandits\nnum_steps = 2000                # Number of steps per run\nnum_runs = 2000                 # Number of independent runs\nepsilon_values = [0.5, 0.1, 0.05, 0.01]    # Epsilon values to test\n\n# Initialize true action values (stationary bandits)\ndef initialize_bandits():\n    return np.random.normal(0, 1, num_bandits)\n\n# Simulate one run of the epsilon-greedy algorithm\ndef simulate_epsilon_greedy(epsilon, true_action_values):\n    Q_values = np.zeros(num_bandits)    # Estimated action values (initially 0)\n    action_counts = np.zeros(num_bandits)  # Number of times each action is taken\n    rewards = []\n\n    for step in range(num_steps):\n        if np.random.rand() &lt; epsilon:  # Exploration\n            action = np.random.randint(num_bandits)\n        else:  # Exploitation\n            action = np.argmax(Q_values)\n\n        # Generate reward from the selected action's true value\n        reward = np.random.normal(true_action_values[action], 1)\n\n        # Update action-value estimates using incremental formula\n        action_counts[action] += 1\n        Q_values[action] += (reward - Q_values[action]) / action_counts[action]\n\n        rewards.append(reward)\n\n    return rewards\n\n# Main simulation loop\naverage_rewards = {eps: np.zeros(num_steps) for eps in epsilon_values}\n\nfor epsilon in epsilon_values:\n    for run in range(num_runs):\n        true_action_values = initialize_bandits()  # New bandit problem for each run\n        rewards = simulate_epsilon_greedy(epsilon, true_action_values)\n        average_rewards[epsilon] += rewards\n\n    # Average over all runs\n    average_rewards[epsilon] /= num_runs\n\n# Plot results\nplt.figure(figsize=(10, 6))\nfor epsilon in epsilon_values:\n    plt.plot(average_rewards[epsilon], label=f\"Epsilon = {epsilon}\")\n\nplt.xlabel(\"Steps\")\nplt.ylabel(\"Average Reward\")\nplt.title(\"Epsilon-Greedy Algorithm Performance\")\nplt.legend()\nplt.grid()\nplt.show()\n\n\n\n\n\n\n\n\n\n # Parameters\nn_arms = 10\nn_steps = 2000\nn_runs = 2000\nepsilon = 0.1\nalpha = 0.5\n\n# Initialize arrays to store average rewards\nsample_average_rewards = np.zeros(n_steps)\nconstant_alpha_rewards = np.zeros(n_steps)\n\n# Simulation\nfor run in range(n_runs):\n    # Initialize true action values (random walk)\n    q_star = np.zeros(n_arms)\n    # Action value estimates\n    sample_average_estimates = np.zeros(n_arms)\n    constant_alpha_estimates = np.zeros(n_arms)\n    action_counts = np.zeros(n_arms)\n\n    for step in range(n_steps):\n        # Update q_star for random walk\n        q_star += np.random.normal(0, 0.01, n_arms)\n\n        # Epsilon-greedy action selection\n        if np.random.rand() &lt; epsilon:\n            action = np.random.choice(n_arms)\n        else:\n            action = np.argmax(sample_average_estimates)\n\n        # Simulate reward (assume reward is equal to q_star + noise)\n        reward = np.random.normal(q_star[action], 1)\n\n        # Sample average method update\n        action_counts[action] += 1\n        sample_average_estimates[action] += (reward - sample_average_estimates[action]) / action_counts[action]\n        sample_average_rewards[step] += (reward - sample_average_rewards[step]) / (run + 1)\n\n        # Constant alpha method update\n        constant_alpha_estimates[action] += alpha * (reward - constant_alpha_estimates[action])\n        constant_alpha_rewards[step] += (reward - constant_alpha_rewards[step]) / (run + 1)\n\n# Plot results\nplt.figure(figsize=(12, 6))\nplt.plot(sample_average_rewards, label='Sample Average Method', color='blue')\nplt.plot(constant_alpha_rewards, label='Constant Step-Size Method (α=0.1)', color='red')\nplt.xlabel('Time Steps')\nplt.ylabel('Average Reward')\nplt.title('Comparison of Action-Value Methods on Nonstationary Problem')\nplt.legend()\nplt.grid()\nplt.show()"
  },
  {
    "objectID": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/comments_definitions.html",
    "href": "talks/so_rl_docs/reinforcement_learning_Sutton_Barto/comments_definitions.html",
    "title": "Untitled",
    "section": "",
    "text": "Reinforcement learning is a framework for learning how to interact with environment from experience.\nAgent takes actions to interact with environment\nThe big challange in RL Design a policy of what actions to take given a state s to maximize a future reward\nQ(s,a) tells us what is the quality of being in state s and taking action a. Then once I find myself in a state s, I just have to look across all of the actions and pick the one that gives the best quality. If I do that in future I will maximize my value."
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/condition_prob.html",
    "href": "talks/stats_docs/dist_slides_docs/condition_prob.html",
    "title": "Conditional Probability and Conditional Expectation",
    "section": "",
    "text": "For any two events \\(E\\) and \\(F\\), the conditional probability of \\(E\\) given \\(F\\) is defined, as long as \\(P(F) &gt; 0\\), by\n\\[\nP(E|F) = \\frac{P(E  F)}{P(F)}.\n\\]\nHence, if \\(X\\) and \\(Y\\) are discrete random variables, then it is natural to define the conditional probability mass function of \\(X\\) given that \\(Y = y\\), by\n\\[\n\\begin{align*}\np_{X|Y}(x|y) &= P(X = x | Y = y) \\\\\n&= \\frac{P(X = x, Y = y)}{P(Y = y)} \\\\\n&= \\frac{p(x,y)}{p_Y(y)}.\n\\end{align*}\n\\]\nSimilarly, the conditional probability distribution function of \\(X\\) given that \\(Y=y\\) is defined, for all \\(y\\) such that \\(P(Y = y) &gt; 0\\), by\n\\[\n\\begin{align*}\nF_{X|Y}(x|y) &= P(X \\leq x | Y = y) \\\\\n&= \\sum_{a \\leq x} P_{X | Y}(a | y) \\\\\n\\end{align*}\n\\]\nThe conditional expectation of \\(X\\) given that \\(Y = y\\) is defined by \\[\nE[X | Y = y] = \\sum_{x} x P(X = x | Y = y) = \\sum_{x} x p_{X|Y}(x|y).\n\\]"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/condition_prob.html#the-discrete-case",
    "href": "talks/stats_docs/dist_slides_docs/condition_prob.html#the-discrete-case",
    "title": "Conditional Probability and Conditional Expectation",
    "section": "",
    "text": "For any two events \\(E\\) and \\(F\\), the conditional probability of \\(E\\) given \\(F\\) is defined, as long as \\(P(F) &gt; 0\\), by\n\\[\nP(E|F) = \\frac{P(E  F)}{P(F)}.\n\\]\nHence, if \\(X\\) and \\(Y\\) are discrete random variables, then it is natural to define the conditional probability mass function of \\(X\\) given that \\(Y = y\\), by\n\\[\n\\begin{align*}\np_{X|Y}(x|y) &= P(X = x | Y = y) \\\\\n&= \\frac{P(X = x, Y = y)}{P(Y = y)} \\\\\n&= \\frac{p(x,y)}{p_Y(y)}.\n\\end{align*}\n\\]\nSimilarly, the conditional probability distribution function of \\(X\\) given that \\(Y=y\\) is defined, for all \\(y\\) such that \\(P(Y = y) &gt; 0\\), by\n\\[\n\\begin{align*}\nF_{X|Y}(x|y) &= P(X \\leq x | Y = y) \\\\\n&= \\sum_{a \\leq x} P_{X | Y}(a | y) \\\\\n\\end{align*}\n\\]\nThe conditional expectation of \\(X\\) given that \\(Y = y\\) is defined by \\[\nE[X | Y = y] = \\sum_{x} x P(X = x | Y = y) = \\sum_{x} x p_{X|Y}(x|y).\n\\]"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/condition_prob.html#the-continuous-case",
    "href": "talks/stats_docs/dist_slides_docs/condition_prob.html#the-continuous-case",
    "title": "Conditional Probability and Conditional Expectation",
    "section": "The Continuous Case",
    "text": "The Continuous Case\nIf \\(X\\) and \\(Y\\) have a joint probability density function \\(f(x, y)\\), then the conditional probability density function of \\(X\\), given that \\(Y = y\\), is defined for all values of \\(y\\) such that \\(f_Y(y) &gt; 0\\), by\n\\[\n\\begin{align*}\nf_{X|Y}(x|y) &= \\frac{f(x,y)}{f_Y(y)} \\\\\n&= \\frac{f(x,y)}{\\int_{-\\infty}^{\\infty} f(x,y) dx}.\n\\end{align*}\n\\] The conditional distribution function of \\(X\\) given that \\(Y = y\\) is defined by \\[\n\\begin{align*}\nF_{X|Y}(x|y) &= P(X \\leq x | Y = y) \\\\\n&= \\int_{-\\infty}^{x} f_{X|Y}(a|y) da \\\\\n&= \\int_{-\\infty}^{x} \\frac{f(a,y)}{f_Y(y)} da \\\\\n&= \\frac{1}{f_Y(y)} \\int_{-\\infty}^{x} f(a,y) da.\n\\end{align*}\n\\]\nThe conditional expectation of \\(X\\) given that \\(Y = y\\) is defined or all values of \\(y\\) such that \\(f_Y(y) &gt; 0\\), by \\[\n\\begin{align*}\nE[X | Y = y] &= \\int_{-\\infty}^{\\infty} x f_{X|Y}(x|y) dx \\\\\n&= \\int_{-\\infty}^{\\infty} x \\frac{f(x,y)}{f_Y(y)} dx \\\\\n&= \\frac{1}{f_Y(y)} \\int_{-\\infty}^{\\infty} x f(x,y) dx.\n\\end{align*}\n\\]"
  },
  {
    "objectID": "talks/stats_docs/dist_slides_docs/condition_prob.html#computing-expectations-by-conditioning",
    "href": "talks/stats_docs/dist_slides_docs/condition_prob.html#computing-expectations-by-conditioning",
    "title": "Conditional Probability and Conditional Expectation",
    "section": "Computing Expectations by Conditioning",
    "text": "Computing Expectations by Conditioning\nLet us denote by \\(E[X|Y]\\) that function of the random variable \\(Y\\) whose value at \\(Y = y\\) is \\(E[X|Y = y]\\). Note that \\(E[X|Y]\\) is itself a random variable. An extremely important important property of conditional expectation is that for all random variables \\(X\\) and \\(Y\\) \\[\nE[X] = E[E[X|Y]]\n\\]\nIf \\(Y\\) is a discrete random variable, then \\[\nE[X] = \\sum_{y} E[X|Y = y] P(Y = y)\n\\]\nIf \\(Y\\) is continuous with density \\(f_Y(y)\\), then \\[\nE[X] = \\int_{-\\infty}^{\\infty} E[X|Y = y] f_Y(y) dy\n\\]"
  },
  {
    "objectID": "talks/so_rl/rl_main.html",
    "href": "talks/so_rl/rl_main.html",
    "title": "Dynamic Programming and Reincorecement Learning",
    "section": "",
    "text": "Slides\n\nDate: Jul 18, 2023 3:50 PM – 4:30 PM\nEvent: Stats\nLocation: Cardiff, UK"
  },
  {
    "objectID": "talks/stats/distributions_main.html",
    "href": "talks/stats/distributions_main.html",
    "title": "Random Variables",
    "section": "",
    "text": "Slides\n\nDate: Jul 26, 2023 3:50 PM – 4:30 PM\nEvent: Stats\nLocation: Cardiff, UK"
  },
  {
    "objectID": "bins/CV/CV.html",
    "href": "bins/CV/CV.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "PhD in Probabilistic Machine Learning in Healthcare Management\nCardiff University, Cardiff, UK Oct 2024 — Present\nPhD in Probabilistic Machine Learning in Healthcare Management\n\n\nRecipient of WGSSS‑ESRC Studentship Award\nProject focused on enhancing discharge care coordination in healthcare and social care using a probabilistic data-driven modelling approach\n\nSupervisors: Prof Bahman Rostami‑Tabar, Dr. Jeremy Dixon\n\n\nMSc in Financial Mathematics\nMiddle East Technical University, Ankara, Turkey Oct 2017 — Aug 2021\n\nDissertation: Effects of Exchange Rate Volatility and Firm-Specific Features on the Rates of Returns of the Manufacturing Firms Listed in Borsa İstanbul: A CAPM Approach\n\nStatistical&Machine learning techniques used: Markov Switching GARCH Models, ARIMA, Panel Data Econometrics, Principal Component Analysis\n\n\nBSc in Business Administration\nMiddle East Technical University, Turkey Oct 2011 — Aug 2015"
  },
  {
    "objectID": "bins/CV/CV.html#education",
    "href": "bins/CV/CV.html#education",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "PhD in Probabilistic Machine Learning in Healthcare Management\nCardiff University, Cardiff, UK Oct 2024 — Present\nPhD in Probabilistic Machine Learning in Healthcare Management\n\n\nRecipient of WGSSS‑ESRC Studentship Award\nProject focused on enhancing discharge care coordination in healthcare and social care using a probabilistic data-driven modelling approach\n\nSupervisors: Prof Bahman Rostami‑Tabar, Dr. Jeremy Dixon\n\n\nMSc in Financial Mathematics\nMiddle East Technical University, Ankara, Turkey Oct 2017 — Aug 2021\n\nDissertation: Effects of Exchange Rate Volatility and Firm-Specific Features on the Rates of Returns of the Manufacturing Firms Listed in Borsa İstanbul: A CAPM Approach\n\nStatistical&Machine learning techniques used: Markov Switching GARCH Models, ARIMA, Panel Data Econometrics, Principal Component Analysis\n\n\nBSc in Business Administration\nMiddle East Technical University, Turkey Oct 2011 — Aug 2015"
  },
  {
    "objectID": "bins/CV/CV.html#work-experince",
    "href": "bins/CV/CV.html#work-experince",
    "title": "Curriculum Vitae",
    "section": "WORK EXPERINCE",
    "text": "WORK EXPERINCE\nReporting and Data Analytics Executive\nAKBANK (a leading bank in Turkey), Istanbul Jun 2022 — Sep 2024\n\nApplied time-series forecasting and machine learning techniques, including ARIMA, Bayesian Time Series, Prophet, ANN, LSTM, Random Forest, LightGBM and XGBoost, to historical data for making long-horizon forecasts of daily customer call volume. The best model achieved over 94% accuracy (1-MAPE) in forecasting all days of the next month.\nImplemented machine learning models (e.g., XGBoost, LightGBM, CatBoost) to predict customer behavior with an over recall rate of 70% and an accuracy rate of 85%, enabling fewer customer complaints and increase sales by 14%.\nAnalyzing large amounts of data to identify trends and find patterns, signals and hidden stories within customer calls data.\nApplied machine learning techniques (Z-score, IsolationForest) to detect anomalies.\nApplied unsupervised machine learning techniques (DBSCAN, Gaussian mixture, K-means) to cluster customers.\nHyperparameter tuning for machine learning models using Hyperopt, Optuna and KerasTuner.\n\nResearch Associate\nThe Economic Policy Research Foundation of Turkey (Think Tank), Ankara Jan 2022 — Apr 2024\n\nDetermined areas of research to increase knowledge in the particular field.\nUtilizing inferential statistics such as hypothesis testing (e.g., t-test, ANOVA test, population proportion test), confidence intervals, correlation analysis and regression analysis to make inferences and draw conclusions about data.\nDeveloped statistical models (regression analysis, panel data modeling) for regional development projects to contribute to data-driven decisions.\n\nSenior Process Development Analyst\nETI GIDA Inc (a major FMCG player in Turkey), Eskisehir Jun 2019 — Jan 2022\n\nInteracted with internal customers to understand business needs and translate into requirements and project scope.\nAssessed the impact of current business processes on users and stakeholders and evaluated potential areas for improvement.\nMaintained strong working knowledge of ERP (SAP), CRM and business intelligence tools and operational features.\n\nInternal Auditor Ankara, Turkey\nTurk Telekom Inc. (the telecom giant of Turkey), Ankara Nov 2015 — Jun 2019\n\nPerformed strategic planning, execution and finalization of audits using data analytics and critical thinking skills.\nInvestigated discrepancies discovered during the auditing process.\nRecommended new methods to improve internal controls and operating efficiency."
  },
  {
    "objectID": "bins/CV/CV.html#research-interests",
    "href": "bins/CV/CV.html#research-interests",
    "title": "Curriculum Vitae",
    "section": "RESEARCH INTERESTS",
    "text": "RESEARCH INTERESTS\n\nData-driven decision making\nMachine learning\nReinforcement learning and stocastic optimization in decision making\nTime series forecasting\nProbabilistic forecasting\nConformal prediction for time series forecasting"
  },
  {
    "objectID": "bins/CV/CV.html#skills-expertise",
    "href": "bins/CV/CV.html#skills-expertise",
    "title": "Curriculum Vitae",
    "section": "SKILLS & EXPERTISE",
    "text": "SKILLS & EXPERTISE\nExpertise: Mathematical and Statistical Modeling, Machine Learning, Time Series Analysis and Forecasting, Stocastic Optimization and Reinforecement Learning, Statistical and Explanatory Data Analysis\nProgramming: Python, SQL\nReporting: Quarto, Advanced Excel, QlikView, SAS\nLanguages English (Fluent), Kurdish (Native), Turkish (Native)"
  },
  {
    "objectID": "bins/CV/CV.html#professional-development",
    "href": "bins/CV/CV.html#professional-development",
    "title": "Curriculum Vitae",
    "section": "PROFESSIONAL DEVELOPMENT",
    "text": "PROFESSIONAL DEVELOPMENT\n\nCertification:\n\nData Science: Machine Learning, HarvardX (edX)\n\nBooks (some of my go-to books):\n\nForecasting: Principles and Practice (Hyndman et al, 2021)\nIntroduction to Statistical Learning with Applications in R (Tibshirani et al, 2019)\nThe Elements of Statistical Learning (Tibshirani et al, 2008)\nProbabilistic Machine Learning: An Introduction (Murphy. 2022)\nReinforcement Learning: An Introduction (Barto et al, 2018)\nReinforcement Learning and Stochastic Optimization (Powell, 2022)\nTime Series Forecasting in Python (Peixeiro, 2022)\nA Student’s Guide to Bayesian Statistics (Lambert, 2018)\nDive into deep learning (Zhang, 2022)"
  },
  {
    "objectID": "bins/CV/CV.html#references",
    "href": "bins/CV/CV.html#references",
    "title": "Curriculum Vitae",
    "section": "References",
    "text": "References\nAvailable upon request"
  },
  {
    "objectID": "cvpdf/cvpdf.html",
    "href": "cvpdf/cvpdf.html",
    "title": "Data Scientist | Mathematical Modeller",
    "section": "",
    "text": "PhD in Probabilistic Machine Learning in Healthcare Management\nCardiff University, Cardiff, UK Oct 2024 — Present.\n\nRecipient of WGSSS‑ESRC Studentship Award\nProject focused on enhancing discharge care coordination in healthcare and social care using a probabilistic data-driven modelling approach\n\nSupervisors: Prof Bahman Rostami‑Tabar, Dr. Jeremy Dixon\n\n\nMSc in Financial Mathematics\nMiddle East Technical University, Ankara, Turkey Oct 2017 — Aug 2021\n\nDissertation: Effects of Exchange Rate Volatility and Firm-Specific Features on the Rates of Returns of the Manufacturing Firms Listed in Borsa İstanbul: A CAPM Approach\n\nStatistical&Machine learning techniques used: Markov Switching GARCH Models, ARIMA, Panel Data Econometrics, Principal Component Analysis\n\n\nBSc in Business Administration\nMiddle East Technical University, Ankara, Turkey Oct 2011 — Aug 2015"
  },
  {
    "objectID": "cvpdf/cvpdf.html#education",
    "href": "cvpdf/cvpdf.html#education",
    "title": "Data Scientist | Mathematical Modeller",
    "section": "",
    "text": "PhD in Probabilistic Machine Learning in Healthcare Management\nCardiff University, Cardiff, UK Oct 2024 — Present.\n\nRecipient of WGSSS‑ESRC Studentship Award\nProject focused on enhancing discharge care coordination in healthcare and social care using a probabilistic data-driven modelling approach\n\nSupervisors: Prof Bahman Rostami‑Tabar, Dr. Jeremy Dixon\n\n\nMSc in Financial Mathematics\nMiddle East Technical University, Ankara, Turkey Oct 2017 — Aug 2021\n\nDissertation: Effects of Exchange Rate Volatility and Firm-Specific Features on the Rates of Returns of the Manufacturing Firms Listed in Borsa İstanbul: A CAPM Approach\n\nStatistical&Machine learning techniques used: Markov Switching GARCH Models, ARIMA, Panel Data Econometrics, Principal Component Analysis\n\n\nBSc in Business Administration\nMiddle East Technical University, Ankara, Turkey Oct 2011 — Aug 2015"
  },
  {
    "objectID": "cvpdf/cvpdf.html#work-experinces",
    "href": "cvpdf/cvpdf.html#work-experinces",
    "title": "Data Scientist | Mathematical Modeller",
    "section": "WORK EXPERINCES",
    "text": "WORK EXPERINCES\nReporting and Data Analytics Executive\nAKBANK (a leading bank in Turkey), Istanbul Jun 2022 — Sep 2024\n\nApplied time-series forecasting and machine learning techniques, including ARIMA, Bayesian Time Series, Prophet, ANN, LSTM, Random Forest, LightGBM and XGBoost, to historical data for making long-horizon forecasts of daily customer call volume. The best model achieved over 94% accuracy (1-MAPE) in forecasting all days of the next month.\nImplemented machine learning models (e.g., XGBoost, LightGBM, CatBoost) to predict customer behavior with an over recall rate of 70% and an accuracy rate of 85%, enabling fewer customer complaints and increase sales by 14%.\nAnalyzing large amounts of data to identify trends and find patterns, signals and hidden stories within customer calls data.\nApplied machine learning techniques (Z-score, IsolationForest) to detect anomalies.\nApplied unsupervised machine learning techniques (DBSCAN, Gaussian mixture, K-means) to cluster customers.\nHyperparameter tuning for machine learning models using Hyperopt, Optuna and KerasTuner.\n\nResearch Associate\nThe Economic Policy Research Foundation of Turkey (Think Tank), Ankara Jan 2022 — Apr 2024\n\nDetermined areas of research to increase knowledge in the particular field.\nUtilizing inferential statistics such as hypothesis testing (e.g., t-test, ANOVA test, population proportion test), confidence intervals, correlation analysis and regression analysis to make inferences and draw conclusions about data.\nDeveloped statistical models (regression analysis, panel data modeling) for regional development projects to contribute to data-driven decisions.\n\nSenior Process Development Analyst\nETI GIDA Inc (a major FMCG player in Turkey), Eskisehir Jun 2019 — Jan 2022\n\nInteracted with internal customers to understand business needs and translate into requirements and project scope.\nAssessed the impact of current business processes on users and stakeholders and evaluated potential areas for improvement.\nMaintained strong working knowledge of ERP (SAP), CRM and business intelligence tools and operational features.\n\nInternal Auditor\nTurk Telekom Inc. (the telecom giant of Turkey), Ankara Nov 2015 — Jun 2019\n\nPerformed strategic planning, execution and finalization of audits using data analytics and critical thinking skills.\nInvestigated discrepancies discovered during the auditing process.\nRecommended new methods to improve internal controls and operating efficiency."
  },
  {
    "objectID": "cvpdf/cvpdf.html#research-interests",
    "href": "cvpdf/cvpdf.html#research-interests",
    "title": "Data Scientist | Mathematical Modeller",
    "section": "RESEARCH INTERESTS",
    "text": "RESEARCH INTERESTS\n\nData-driven decision making\nMachine learning\nReinforcement learning and stocastic optimization in decision making\nTime series forecasting\nProbabilistic forecasting\nConformal prediction for time series forecasting"
  },
  {
    "objectID": "cvpdf/cvpdf.html#skills-expertise",
    "href": "cvpdf/cvpdf.html#skills-expertise",
    "title": "Data Scientist | Mathematical Modeller",
    "section": "SKILLS & EXPERTISE",
    "text": "SKILLS & EXPERTISE\nExpertise: Mathematical and Statistical Modeling, Machine Learning, Time Series Analysis and Forecasting, Stocastic Optimization and Reinforecement Learning, Statistical and Explanatory Data Analysis\nProgramming: Python SQL\nReporting: Quarto Advanced Excel QlikView SAS\nLanguages English (Fluent), Kurdish (Native), Turkish (Native)"
  },
  {
    "objectID": "cvpdf/cvpdf.html#professional-development",
    "href": "cvpdf/cvpdf.html#professional-development",
    "title": "Data Scientist | Mathematical Modeller",
    "section": "PROFESSIONAL DEVELOPMENT",
    "text": "PROFESSIONAL DEVELOPMENT\n\nCertification:\n\nData Science: Machine Learning, HarvardX (edX)\n\nBooks (some of my go-to books):\n\nForecasting: Principles and Practice (Hyndman et al, 2021)\nIntroduction to Statistical Learning with Applications in R (Tibshirani et al, 2019)\nThe Elements of Statistical Learning (Tibshirani et al, 2008)\nProbabilistic Machine Learning: An Introduction (Murphy. 2022)\nReinforcement Learning: An Introduction (Barto et al, 2018)\nReinforcement Learning and Stochastic Optimization (Powell, 2022)\nTime Series Forecasting in Python (Peixeiro, 2022)\nA Student’s Guide to Bayesian Statistics (Lambert, 2018)\nDive into deep learning (Zhang, 2022)"
  },
  {
    "objectID": "cvpdf/cvpdf.html#references",
    "href": "cvpdf/cvpdf.html#references",
    "title": "Data Scientist | Mathematical Modeller",
    "section": "References",
    "text": "References\nAvailable upon request"
  }
]